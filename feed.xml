<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iterative Engineering Blog</title>
    <description>Blog where we share our thoughts, reflections and experiences from building digital products and software at Iterative Engineering</description>
    <link>https://blog.iterative.engineering</link>
    <atom:link href="https://blog.iterative.engineering/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 02 Jan 2022 22:43:24 +0100</pubDate>
    <lastBuildDate>Sun, 02 Jan 2022 22:43:24 +0100</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>How to keep the team integrated despite physical distance</title>
        <description>&lt;p&gt;Last year was a challenge for all of us. The pandemic has shaken the whole world and reshaped it in many ways. We are all aware of the negative imprint it left on people’s everyday lives. Among other things, it heavily reduced the social aspects of daily work impacting teamwork and collaboration. But as every coin has two sides, even the hard times may offer opportunities for growth.&lt;/p&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;p&gt;In our case the lockdown and work from home policy had almost no impact on our work routines, because over the years of providing remote services for our clients we were well equipped with the right tools. The main downside of social distancing was the reduced flow of information. If you are in the office, sitting next to each other, it’s so much easier to cooperate! It was not a problem to switch to the online communication channels within the team, as everyone was already using them daily to talk directly to our clients. To ensure the proper flow of information, we introduced a few sync-up meetings focused on specific topics, along with one monthly company-wide where everyone is encouraged to share their thoughts. That worked surprisingly well!&lt;/p&gt;

&lt;p&gt;But it’s not just about work. An ability to stay at home with my favourite cup of coffee and avoid terrible traffic, that recently jammed my district due to construction works, was awesome. But I quickly realised that I was missing something important, that I wasn’t fully aware of before it suddenly disappeared. I enjoyed my work not only because of the technical and business challenges, but also because I could spend time with great people. These seemingly unimportant chats in the kitchen, jokes and casual conversations are the actual glue that keeps the team together.&lt;/p&gt;

&lt;p&gt;That social aspect may start to fade away when everyone is focused just on their work, but it’s an essential part of an enjoyable workplace. When people know and like each other, it’s much easier to work together on tasks requiring cooperation, provide onboarding and mentoring for the newcomers or just delivering – as people help each other and feel responsible for the end result.&lt;/p&gt;

&lt;h2 id=&quot;opportunities&quot;&gt;Opportunities&lt;/h2&gt;

&lt;p&gt;The fully remote working environment has also encouraged us to look beyond our neighbourhood and open for fully remote workers from other parts of the country. We have now successfully established cooperation with developers from southern, central and northern Poland, which proved to be very productive.&lt;/p&gt;

&lt;p&gt;As the pandemic restrictions were relaxed, we slowly started to transition to a hybrid way of working, where the office is open for everyone, but they can decide to work remotely if that’s more convenient. As we now had some fully-remote teammates, a new challenge arose. How can we integrate the team members, when we are so far away from each other?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/iterative-kitchen.jpg&quot; alt=&quot;Kitchen party&quot; title=&quot;Kitchen party&quot; /&gt;
&lt;em&gt;So good to have a kitchen in the office&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So far, we were successful in building a company not only on technical skills of individuals, but also on relationships and teamwork. We were celebrating birthdays (where individually crafted memes became tradition), meeting regularly at pizza parties and spending casual time together. But for the new team members from northern Poland it was much more difficult to travel 600 km just to meet us in the office.&lt;/p&gt;

&lt;h2 id=&quot;get-together&quot;&gt;Get together!&lt;/h2&gt;

&lt;p&gt;We decided to pick up a central location and provide a convenient opportunity for everyone to meet in person. After a short voting, the team decided for Warsaw. We organised a weekend trip to meet everyone in person and spend some time together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/remote-work.jpg&quot; alt=&quot;Who said that remote work should be limited to home-office?&quot; title=&quot;Who said that remote work should be limited to home-office?&quot; /&gt;
&lt;em&gt;Who said that remote work should be limited to home-office?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We are located in different parts of Poland, but the majority lives in the Silesia region. That group took a direct high-speed train to Warsaw, where the integration started. When the rest of the folks arrived, we began the evening by visiting a fantastic Croatian restaurant. After that, there was a pub crawl, a couple of shots and a visit to a club. That was a great come back to normal life after months of social distancing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/in-restaurant.jpg&quot; alt=&quot;The Iterative team in a Croatian restaurant&quot; title=&quot;The Iterative team in a Croatian restaurant&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/bar.jpg&quot; alt=&quot;Pub crawling&quot; title=&quot;Pub crawling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next day started with a delicious breakfast in the pancake restaurant and then there was time for team building. We decided to visit an escape room and divided into two sub-teams that competed for the fastest time to solve the mysteries of a WWII bunker and riddles left by a couple of artists. That was fun!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/escape-room.jpg&quot; alt=&quot;Escape Room&quot; title=&quot;Escape Room&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/iterative-engineering-team.jpg&quot; alt=&quot;Iterative Engineering Team&quot; title=&quot;Iterative Engineering Team&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Integration events like this are seemingly just unimportant entertainment. But they provide a hidden, immeasurable value. Interaction between people is essential for having a productive and well-organized team. As social animals (yes, engineers also count!), we cannot rely solely on verbal online communication. Even though we still keep working remotely, meeting a person in real life and spending even a short time together is the fastest way to encourage further cooperation. It is important to put a face to a voice, and H254-compressed video of a face on a zoom call won’t let you build the same level of relationship as a real meeting!&lt;/p&gt;

&lt;p&gt;We’re definitely going to repeat this regularly!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/wasted.jpg&quot; alt=&quot;Coming back home&quot; title=&quot;Coming back home&quot; /&gt;
&lt;em&gt;That was actually quite a challenging day 😉!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Dec 2021 00:00:00 +0100</pubDate>
        <link>https://blog.iterative.engineering/2021/12/20/how-to-keep-the-team-integrated/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/12/20/how-to-keep-the-team-integrated/</guid>
        
        <category>Remote work</category>
        
        <category>Team integration</category>
        
        <category>Distributed teams</category>
        
        
      </item>
    
      <item>
        <title>Key 8 Takeaways from Stack Overflow 2021 Developers Survey</title>
        <description>&lt;p&gt;Recently over 80k developers gave their voice on how they earn, learn, level up and which tools they use the most willingly or which they hate. Following we share our CEO and CTO subjective viewpoint on some of the most important insights from Stack Overflow Developer Survey 2021.&lt;/p&gt;

&lt;p&gt;The IT industry is a very dynamic landscape. As any competitive employer and digital product development company we try to stay up to date with rapid changes and newest technology trends. We analyse the market, track research reports and surveys, all of that to try to stay at the bleeding edge of technology.&lt;/p&gt;

&lt;h3 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript is the most widely used technology, however position of Python, Java and C# is still strong.&lt;/li&gt;
  &lt;li&gt;Scripting (JavaScript, Python, TypeScript) and modern compiled languages (GO and Rust) are trending and getting more and more interest from the community.&lt;/li&gt;
  &lt;li&gt;Proficiency with Docker &amp;amp; containers is a must have for modern developers.&lt;/li&gt;
  &lt;li&gt;Visual Studio Code as an IDE, and React.js as a web framework are dominating on the market in their category, both loved and widely used.&lt;/li&gt;
  &lt;li&gt;Open source document databases (Mongo, ElasticSearch) and SQL databases (PostgreSQL, MySql) are storage technologies which developers want to use the most.&lt;/li&gt;
  &lt;li&gt;Online resources are the primary source for knowledge and information.&lt;/li&gt;
  &lt;li&gt;Most of the developers are graduates but they learn how to code elsewhere.&lt;/li&gt;
  &lt;li&gt;Top paid jobs, ranging at $100k+ per year, are related to functional programming (Clojure, F#). Except for the execs and management, devops and data engineering are positions with the highest salaries with an average of $70k per year.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;current-tech-demand-and-workloads&quot;&gt;Current tech demand and workloads&lt;/h2&gt;

&lt;p&gt;Let’s start with a look at the most utilised technologies across the sector and dive into details of what is used to turn the cogs&lt;/p&gt;

&lt;h3 id=&quot;most-popular-programming-languages&quot;&gt;Most popular programming languages&lt;/h3&gt;

&lt;p&gt;There can be only one king and it is JavaScript. The domination is impressive and we believe it will remain as such for a longer time. Its universality is probably a key factor here. It is applied for all ‘sides’ of software development: server side programming (backend), web (frontend) and mobile (hybrid). And to be fair it’s pretty damn good for all of those.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-used-programming-language.png&quot; alt=&quot;Most used programming language - there can only be one king and it is JavaScript&quot; title=&quot;Most used programming language - there can be only one king and it is JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The trend of steady and constant growth of scripting languages such as JavaScript, Python or TypeScript still in place. As their performance limitations are less and less relevant, they can be applied to more and more cases. While working with such languages is in a lot of cases more efficient and quick compared to native or managed technologies.&lt;/p&gt;

&lt;p&gt;However Java in Top 5 and C# in the Top 10 is definitely a signal that managed languages are still strong. In fact they are evolving faster than ever before. Very recently we’ve welcomed the official release of Java 17 (!) and it just took 6 months to get there after the release of Java 16, while in the past new releases took years (i.e. jump from java 8 to Java 9 took 5 years). It really became worth following the official road map: &lt;a href=&quot;https://www.java.com/releases/&quot;&gt;https://www.java.com/releases/&lt;/a&gt; as changes are happening rapidly and often are pretty useful (i.e. Record).&lt;/p&gt;

&lt;p&gt;It feels that we at Iterative Engineering are pretty well placed. Our main focus is Java for backend and JavaScript/TypeScript for frontend and mobile. We also often deal with most of the TOP 10, with the only exception of native technologies - C or C++, which we’ve never found that attractive. We believe that such focus gives a great current and future outlook.&lt;/p&gt;

&lt;h3 id=&quot;integrated-development-environment-ide-means&quot;&gt;Integrated Development Environment (IDE means)&lt;/h3&gt;

&lt;p&gt;Kudos to Microsoft for Visual Studio Code. Efficient yet lightweight tool, with on-demand support for a variety of technologies. It is truly a pleasure to use it and clearly the market voice confirms that. A well deserved 1st place with more than double the score of the closest competitor.&lt;/p&gt;

&lt;p&gt;Top 5 consist of 3 lightweight and 2 fully featured IDEs. The trend is for sure related to increasing popularity of scripting languages. However we think that the core reason was that bloated IDEs used to be not fun to work with. A myriad of features along with bad performance - was just a killer. Fortunately modern ones like IntelliJ and Visual Studio (at least the recent versions) are definitely built with performance in mind and are superb to work with.&lt;/p&gt;

&lt;p&gt;A surprise for us was the strong position of Notepad++. Internally we had given up on it a while ago in favour of Visual Studio Code or Sublime, but clearly it’s worth revisiting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-used-IDE.png&quot; alt=&quot;Most used IDEs - the winner is Visual Studio Code&quot; title=&quot;Most used IDEs - the winner is Visual Studio Code&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fundamental-coding-toolset&quot;&gt;Fundamental coding toolset&lt;/h3&gt;

&lt;p&gt;Git &amp;amp; Docker (containers), a must haves for any modern developer. Those tools make life (or work should we say?) so much easier that it’s unprecedented. If you wish to learn a recently new and interesting Docker feature might be worth a look at a really great article on &lt;a href=&quot;https://blog.iterative.engineering/2021/09/28/creating-optimised-docker-images-using-multi-stage-builds/&quot;&gt;Creating optimised Docker Images using Multi-Stage Builds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes as the only container orchestrator on the top 10 list is no surprise. Developer driven environment alongside reliable operations, makes it a first choice for more complex deployment scenarios. Once combined with other most used tools from devops perspective - Ansible and Terraform, we get a pretty neat set up for CI/CD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/fundamental-coding-toolset.png&quot; alt=&quot;Fundamental coding toolset starts with Git and Docker&quot; title=&quot;Fundamental coding toolset starts with Git and Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit of curiosity for us are &lt;a href=&quot;https://github.com/yarnpkg/berry&quot;&gt;Yarn&lt;/a&gt; and &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwij47-Wk9D0AhXJxIsKHcDrAQMQFnoECAsQAQ&amp;amp;url=https%3A%2F%2Fdeno.land%2F&amp;amp;usg=AOvVaw2tfvsEssp_oAi-6XYbU_uo&quot;&gt;Deno&lt;/a&gt;. The result of the first we take as a signal to consider it as a replacement of npm package manager, especially that it recently increased on development. The second proves that Rust and V8 JavaScript are reality and we really need to get up to speed with those technologies as we expect it to grow rapidly.&lt;/p&gt;

&lt;h3 id=&quot;top-cloud-platforms&quot;&gt;Top cloud platforms&lt;/h3&gt;

&lt;p&gt;AWS maintains its lead as the most widely used cloud platform, but Google Cloud and Microsoft Azure made substantial gains and are catching up. They simply became reliable and performant, especially Microsoft Azure, which a few years ago was just a pain to work with (from dev perspective).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/top-cloud-platforms.png&quot; alt=&quot;Top cloud platforms - AWS maintains its lead but Google Cloud and Microsoft Azure are catching up&quot; title=&quot;Top cloud platforms - AWS maintains its lead but Google Cloud and Microsoft Azure are catching up&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-desired-by-the-tech-talents&quot;&gt;What is desired by the tech talents?&lt;/h2&gt;

&lt;p&gt;Now the other side of the coin - the outlook on which technologies are the most inspiring for and the most wanted across developers. While at Iterative we do not blindly follow hypes, we really keep an eye on the trends. Simply because all of the great technologies of tomorrow are newcomers of today.&lt;/p&gt;

&lt;h3 id=&quot;most-wished-programming-languages&quot;&gt;Most wished programming languages&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/coding-in-python-bridy-not-enjoys-it.png&quot; alt=&quot;Coding in Python - bridy seems to not enjoy it that much!&quot; title=&quot;Coding in Python - bridy seems to not enjoy it that much!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One may not like it (as the birdy above!), yet still Python is the most desired programming language to work with across the Community. The lead however isn’t ultimate and there is strong competition right behind. TypeScript &amp;amp; JavaScript, but also Go and Rust - modern compile concurrency focused languages, which seems like another trend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-wished-programming-languages.png&quot; alt=&quot;Most wished programming languages - One may not like it (as the birdy above!), yet still Python is the most desired programming language&quot; title=&quot;Most wished programming languages - One may not like it (as the birdy above!), yet still Python is the most desired programming language&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From our tech of choice perspective seeing two JVM related Java &amp;amp; Kotlin in Top 10 feels pretty great. While not the most hyped out there, still many so many wish to learn it, just because of the fact that it’s reliable and enjoyable to work with.&lt;/p&gt;

&lt;h3 id=&quot;loved-data-storage-technologies&quot;&gt;Loved data storage technologies&lt;/h3&gt;

&lt;p&gt;Quite shocked by the fact of such a close competition for 1st place. PostgreSql and MongoDB, two completely different philosophies, yet both got a sizable amount of interest from the Community. Redis in 3rd and Elasticsearch in 4th place - no surprise at all - simply well proven and excellent at what they are aimed for. MySql closing Top 5 just seals that open source SQL and document stores are having a good time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/loved-data-storage-technologies.png&quot; alt=&quot;Loved data storage technologies - PostgreSql and MongoDB are the winners&quot; title=&quot;Loved data storage technologies - PostgreSql and MongoDB are the winners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit disappointing to not see any interest in graph databases like Neo4j, however it may be that they still need to prove their merits. Finally at Iterative we use 4 out of Top 5 daily, but now are also tempted to give Mongo a try, as the desire must be there for the reason.&lt;/p&gt;

&lt;h3 id=&quot;most-wanted-web-frameworks&quot;&gt;Most wanted web frameworks&lt;/h3&gt;

&lt;p&gt;React.js not only has dominated the market (as this year it has overtaken jQuery in usage), but it is also the most wanted web framework by the devs. Winning in both rankings, in probably the most competitive and variable category, confirms that going with it you can’t be wrong.&lt;/p&gt;

&lt;p&gt;Vue.js and Angular are still valued and on the radar of the community, but a newcomer Svelte had taken a fair chunk of interest too. Definitely a one to try out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-wanted-web-frameworks.png&quot; alt=&quot;Most wanted web frameworks - React.js has dominated the market as most wanted and as moste used web framework&quot; title=&quot;Most wanted web frameworks - React.js has dominated the market as most wanted and as moste used web framework&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learning-curve-and-knowledge-sources&quot;&gt;Learning curve and knowledge sources&lt;/h2&gt;

&lt;p&gt;The learning process or at least first encounters with coding happens pretty early, sometimes as early as 5-10y old, mostly before 18y old and in 90% before 24y! It may mean that learning to code in your 30’s may be nearly impossible. However we need to remember that for at least several years everyone has basic contact with programming in early school days, therefore the meaning might be a bit blurred here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-when-we-start-to-code.png&quot; alt=&quot;When we start to code - in 90% of cases before 24y&quot; title=&quot;When we start to code - in 90% of cases before 24y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a pity that this question isn’t followed with more detailed ones about the learning curve. Writing first lines of code and the actual start of learning to code might not be the same for many.&lt;/p&gt;

&lt;p&gt;80% of professionals have higher education and while (good) companies do not care for the education grades but rather for the actual knowledge. Still it’s the most natural path to become a developer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-developers-education.png&quot; alt=&quot;Developers education - 80% of professionals have higher education&quot; title=&quot;Developers education - 80% of professionals have higher education&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contrary to education, developers do not learn how to code in a college but rather from online resources, books and in school. Younger ones tend to learn from online resources, while older ones have learned from traditional mediums like school or books. The speed at which technology changes might be the reason, as it’s not feasible to maintain college or school courses up to date with all updates and trends. However the principals and concepts for building the software remain mostly intact and this might be a real value proposition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-where-do-devs-learn-from.png&quot; alt=&quot;Where do devs learn from - Contrary to education, developers learn from online resources&quot; title=&quot;Where do devs learn from - Contrary to education, developers learn from online resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once work related questions or challenges are in need to solve then Google and StackOverflow are the first line of support. Countless situations for us in which those significantly helped to solve the problems. IT actually maybe one of the most important skills to learn as a developer - effective searching for information. One may think it’s easy, but it takes time to master to search efficiently.&lt;/p&gt;

&lt;p&gt;If stuck, another approach is context switching or having a pause. Very often helpful, as problems then are analyzed subconsciously often leading to solutions immediately once back to work. However, sometimes it’s a burden, as not easy to switch off from working, that’s the reality and needs to be accepted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-what-do-devs-when-stuck.png&quot; alt=&quot;What do devs when stuck - Google and StackOverflow are the first line of support&quot; title=&quot;What do devs when stuck - Google and StackOverflow are the first line of support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At Iterative in addition to all mentioned in TOP 5 we also like to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck debugging&lt;/a&gt; technique. It simply is about describing the problem to someone else, so he can understand the context. Turns out that such exercise helps to structure the problem to yourself and very often points to an error or blocker immediately once prepared.&lt;/p&gt;

&lt;h2 id=&quot;where-is-the-money&quot;&gt;Where is the money?&lt;/h2&gt;

&lt;p&gt;When it comes to coding, it looks like the biggest money is in less popular, functional paradigm related programming languages. Clojure with an average equal to $95k per year takes a 1st place with a big lead against following F# at $81k - pretty impressive! Python with $59k on 19th, JavaScript with $54k on 29th and Java with $52k on 34th places. Not bad, but the gap between leaders is quite significant. Not sure if the results are fully representative due a smaller sample for functional technologies, but not being common may actually be the reason for the price.&lt;/p&gt;

&lt;p&gt;In the devops world what is popular and what is desired is also paid pretty well. 1st place was taken by Pulumi with an average of $110k, followed by Terraform and Chef with $90k averages, next are Ansible, Puppet and Chef with around $75k average.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/where-is-the-money-top-paid-technologies.png&quot; alt=&quot;Top paid technologies are related to functional programming (Clojure, F#)&quot; title=&quot;Top paid technologies are related to functional programming (Clojure, F#)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at salaries from a role angle confirms that except executives and managers ranging at average of $95k, devops specialists are the ones to earn the most with an average of $70k. Then next to them are data engineers at $68k. The gap to software developers is quite big as full stack or backend specialists average at around $55k, while frontend at $50k. The least paid are students at roughly $20k and weirdly mobile developers at only $42k.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/where-is-the-money-best-salaries.png&quot; alt=&quot;Best salaries - except for the execs and management, devops and data engineering are positions with the highest salaries&quot; title=&quot;Best salaries - except for the execs and management, devops and data engineering are positions with the highest salaries&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Thank you for getting with us over here, as it wasn’t a short read! We hope our analysis will give you base ground for further thinking, discussion and planning the future.&lt;/p&gt;

&lt;p&gt;Takeaways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript is the most widely used technology, however position of Python, Java and C# is still strong.&lt;/li&gt;
  &lt;li&gt;Scripting (JavaScript, Python, TypeScript) and modern compiled languages (GO and Rust) are trending and getting more and more interest from the community.&lt;/li&gt;
  &lt;li&gt;Proficiency with Docker &amp;amp; containers is a must have for modern developers.&lt;/li&gt;
  &lt;li&gt;Visual Studio Code as an IDE, and React.js as a web framework are dominating on the market in their category, both loved and widely used.&lt;/li&gt;
  &lt;li&gt;Open source document databases (Mongo, ElasticSearch) and SQL databases (PostgreSQL, MySql) are storage technologies which developers want to use the most.&lt;/li&gt;
  &lt;li&gt;Online resources are the primary source for knowledge and information.&lt;/li&gt;
  &lt;li&gt;Most of the developers are graduates but they learn how to code elsewhere.&lt;/li&gt;
  &lt;li&gt;Top paid jobs, ranging at $100k+ per year, are related to functional programming (Clojure, F#). Except for the execs and management, devops and data engineering are positions with the highest salaries with an average of $70k per year.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusions for us at Iterative Engineering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explore and evaluate Rust and GO technologies&lt;/li&gt;
  &lt;li&gt;Dockerize, Containerize, Kubernitize… just do it, no excuses!&lt;/li&gt;
  &lt;li&gt;Embrace the fact that devs learn online - encourage and provide them means for that&lt;/li&gt;
  &lt;li&gt;Consider unifying towards React.js and Visual Studio Code  as a primary choice&lt;/li&gt;
  &lt;li&gt;Prepare higher budgets when going for devops and data engineering related endeavours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, while the above seemed most insightful, there are many other aspects which the StackOverflow survey has touched and we really recommend &lt;a href=&quot;https://insights.stackoverflow.com/survey/2021&quot;&gt;taking a look at it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you wish to discuss your thoughts or have any questions give us a shout on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedIn&lt;/li&gt;
  &lt;li&gt;contact@iterative.pl&lt;/li&gt;
  &lt;li&gt;l or simply book a discovery call &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Dec 2021 00:00:00 +0100</pubDate>
        <link>https://blog.iterative.engineering/2021/12/10/key-8-takeaways-from-stackoverflow-2021-developers-survey/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/12/10/key-8-takeaways-from-stackoverflow-2021-developers-survey/</guid>
        
        <category>IT Industry State and Outlook</category>
        
        <category>Software Development Trends</category>
        
        <category>Community Surveys and Raports</category>
        
        
      </item>
    
      <item>
        <title>Creating optimised Docker Images using Multi-Stage Builds</title>
        <description>&lt;p&gt;Have you ever wondered how you can leverage building docker containers in your project to take your experience to the next level? If so then have a look at this step by step guide that hopefully will help you achieve that goal using multi-stage builds.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you would like to preview the code used in this article, just clone &lt;a href=&quot;https://github.com/IterativeEngineering/blog.docker-multistage-builds&quot;&gt;this repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-use-multi-stage-builds&quot;&gt;Why use Multi-Stage builds?&lt;/h2&gt;

&lt;p&gt;In a nutshell multi-stage builds feature is a recent improvement to the docker build system&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;final image sizes&lt;/li&gt;
  &lt;li&gt;image build orchestration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The refinement is achieved via allowing to consecutively use different images (for whatever purpose is needed) and pipe data subsequently through them within a single Dockerfile with assumption that the final image is built based on the last FROM statement.&lt;/p&gt;

&lt;h2 id=&quot;standard-approach&quot;&gt;Standard approach&lt;/h2&gt;

&lt;p&gt;If you already worked with a docker, you certainly faced the problem of large built images or had to do custom shell scripts to orchestrate build. Each instruction in the dockerfile adds another layer to the image which increases its size. Moreover, creating more complex images may require the use of additional shell scripts and multiple dockerfiles which may be cumbersome to manage.&lt;/p&gt;

&lt;p&gt;To illustrate the above issues, I’ve created a simple java web application that I am going to build and run in a docker container. By default, without using multistage builds, the  dockerfile would look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Dockerfile.singlestage
FROM registry.access.redhat.com/ubi8/openjdk-11:1.3
WORKDIR /deployments
COPY . /deployments
RUN mvn package
EXPOSE 8080
CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;target/demo-webapp-0.0.1-SNAPSHOT.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above file we perform following steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a new image based on the redhat’s &lt;em&gt;universal base image&lt;/em&gt; that already contains openjdk-11.&lt;/li&gt;
  &lt;li&gt;Create the &lt;em&gt;/deployments&lt;/em&gt; working directory and then copy the content of our project to it.&lt;/li&gt;
  &lt;li&gt;Build java archive file with maven&lt;/li&gt;
  &lt;li&gt;Run java application from command line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since we already have the Dockerfile prepared, we can start building the image with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t demo-webapp:singlestage -f Dockerfile.singlestage .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards we can check the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images

## _REPOSITORY 		TAG 		IMAGE ID 		CREATED 		SIZE
demo-webapp		singlestage	491de71ef224		24 seconds ago		549MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-an-image-using-builder-pattern--shell-script&quot;&gt;Build an image using builder pattern &amp;amp; shell script&lt;/h2&gt;

&lt;p&gt;The newly created image that runs our application is quite large, so let’s optimize it using the builder pattern. For this purpose, we need to create 2 separate dockerfiles - one responsible for building the application and the other for launching it. Thanks to this approach, the final runner container may contain only elements that are important to us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Dockerfile.builder
FROM registry.access.redhat.com/ubi8/openjdk-11:1.3
WORKDIR /deployments
COPY . /deployments
RUN mvn package
# Dockerfile.runner
FROM gcr.io/distroless/java:11
COPY ./deployments/target/demo-webapp-0.0.1-SNAPSHOT.jar .
EXPOSE 8080
CMD [&quot;demo-webapp-0.0.1-SNAPSHOT.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To automate the process of building images defined in separate dockerfiles, we create a shell script that carries out the steps necessary to run our application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Building demo-webapp builder image...&quot;&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; demo-webapp:singlestage-builder &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile.builder &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Extracting builder content...&quot;&lt;/span&gt;
docker container create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; extract-builder demo-webapp:singlestage-builder
docker container &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;extract-builder:/deployments &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; extract-builder
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Building demo-webapp runner image...&quot;&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; demo-webapp:singlestage-runner &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile.runner &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After executing the &lt;em&gt;build.sh&lt;/em&gt; script, we can notice that 2 images were created and the final (runner) image is much smaller than before. It is a very big advantage, because you only need to transfer the runner image during application release in the future.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## _REPOSITORY 		TAG 			IMAGE ID 	CREATED 		SIZE
demo-webapp		singlestage-runner	5fd438ae9faa	9 seconds ago		217MB
demo-webapp		singlestage-builder	f6e90caab67b	10 seconds ago		532MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;multi-stage-build&quot;&gt;Multi-stage build&lt;/h2&gt;

&lt;p&gt;Along with the implementation of version 17.05, docker provided the multi-stage build functionality which allows you to divide the creation of the container into several phases and build it as several separate images that have access to each other. To take advantage of multistage builds, we need to create a new dockerfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Dockerfile.multistage
FROM registry.access.redhat.com/ubi8/openjdk-11:1.3 AS builder
WORKDIR /deployments
COPY . /deployments
RUN mvn package
FROM gcr.io/distroless/java:11 AS runner
COPY --from=builder /deployments/target/demo-webapp-0.0.1-SNAPSHOT.jar .
EXPOSE 8080
CMD [&quot;demo-webapp-0.0.1-SNAPSHOT.jar&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As of now dockerfile contains two &lt;em&gt;FROM&lt;/em&gt; clauses and it will build 2 separate images consecutively - the first &lt;em&gt;builder&lt;/em&gt; and the second, &lt;em&gt;runner&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When building the &lt;em&gt;builder&lt;/em&gt; image we execute almost exactly the same commands as in the case of executing the build using the single-stage build. The difference is the application startup command, which will be invoked by the &lt;em&gt;runner image&lt;/em&gt;. So let’s try to run it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t demo-webapp:multistage -f Dockerfile.multistage .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After calling the &lt;em&gt;docker images&lt;/em&gt; command, we can see that also this time two images were created. However, we didn’t need to write additional shell scripts for this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## _REPOSITORY 		TAG 		IMAGE ID 		CREATED 		SIZE
demo-webapp		multistage	44af0173ce49		8 seconds ago		217MB
&amp;lt;none&amp;gt; 		&amp;lt;none&amp;gt;			4969b156508a		8 seconds ago		549MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;As you can see, the multi-stage approach has many advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easier management of the image creation process (thanks to the possibility of including instructions for several related images in a single dockerfile)&lt;/li&gt;
  &lt;li&gt;No need to create shell scripts to automate the entire process.&lt;/li&gt;
  &lt;li&gt;Saving disk space (By using the builder container as a common base for subsequent containers)&lt;/li&gt;
  &lt;li&gt;Reducing the size of the final runtime container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! We hope you found “Creating optimised Docker Images using Multi-Stage Builds” helpful in your devops activities.&lt;/p&gt;

&lt;p&gt;If this topic interests you, visit &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;use multi-stage builds&lt;/a&gt; for more details or even better &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;talk to our team&lt;/a&gt; today.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Sep 2021 00:00:00 +0200</pubDate>
        <link>https://blog.iterative.engineering/2021/09/28/creating-optimised-docker-images-using-multi-stage-builds/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/09/28/creating-optimised-docker-images-using-multi-stage-builds/</guid>
        
        <category>Docker</category>
        
        <category>Docker Images</category>
        
        <category>Containers</category>
        
        <category>Build pipeline</category>
        
        <category>Continuous Delivery</category>
        
        
      </item>
    
      <item>
        <title>How to Avoid Overdesigning</title>
        <description>&lt;p&gt;Overdesign is a state wherein a product is overly-complex or exceeds the usual standards of its contemporaries to the point where it becomes annoying or unusable. Engineering companies are the most likely to fall into this trap as we’re the ones competing to find the next big thing.&lt;/p&gt;

&lt;p&gt;In addition to the negative impact on user experience it also heavily increases costs and time to market. As it leads to long design &amp;amp; analysis cycles, followed by even more  challenging implementation due to complexity of planned solution.&lt;/p&gt;

&lt;p&gt;A prominent example of overdesign could be at the time (2013!) a potentially breakthrough &lt;a href=&quot;https://www.digitaltrends.com/cool-tech/samsung-to-introduce-eye-scroll-feature-on-galaxy-s4/&quot;&gt;eye-scroll feature&lt;/a&gt; of the Samsung Galaxy S4. The idea was to allow users a “hands-free” experience by letting their eyes control the screen, which in an essence sounds great.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But smart scrolling didn’t always work well for me, and like Air Gesture, I found it easier just to touch the screen to navigate the old-fashioned way 
&lt;cite&gt;Steve Kovach, Businessinsider&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, it turned out that users quickly became tired of the feature and its interference whenever they were watching a video or reading an article.&lt;/p&gt;

&lt;p&gt;So how to avoid Overdesign? Following are a few rules that may help in doing so!&lt;/p&gt;

&lt;h2 id=&quot;what-people-actually-want&quot;&gt;What People Actually Want&lt;/h2&gt;
&lt;p&gt;Companies often get in their own way by overthinking features without sparing a thought for what users actually want. As we embrace a customer driven approach we wanted to figure this out for ourselves. So we simply asked some of our clients to leave reviews of our work on the &lt;a href=&quot;https://themanifest.com/pl/software-development/app-modernization/companies#iterativeengineering&quot;&gt;B2B service provider&lt;/a&gt; platforms, Clutch and The Manifest.&lt;/p&gt;

&lt;p&gt;The answers were quite telling and most of them boil down to three essential elements. They want their projects done quickly, the products easy to use and the collaboration process to be tight &amp;amp; transparent.&lt;/p&gt;

&lt;h2 id=&quot;get-it-done&quot;&gt;Get It Done&lt;/h2&gt;
&lt;p&gt;Projects operate under tight deadlines in order to minimize expenditures on a single factor. Finishing a job ahead of schedule is a big boost to everyone involved. While this isn’t anything groundbreaking, it seems most companies underestimate how much clients value this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-avoid-overdesign/win.png&quot; alt=&quot;Wakacje.IN, a travel holidays e-commerce app - client review for 5 stars&quot; title=&quot;Wakacje.IN, a travel holidays e-commerce app - client review for 5 stars&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our client in this review made a point of mentioning the rapid development that our development process allowed. This pushed their timetable up, which positively impacted their sales and leads for the rest of the period.&lt;/p&gt;

&lt;h2 id=&quot;keep-it-lean&quot;&gt;Keep it Lean&lt;/h2&gt;
&lt;p&gt;Iterative approach as one of the foundations of Lean principles is an invaluable solution for avoiding overdesign. The philosophy of many little steps provide a chance for a rapid verification and constant adjustments of taken direction. Leading to better results with less work, while also avoiding overthinking. It is also more appreciated by the customers as they see changes quickly and can really affect the shape of the product.&lt;/p&gt;

&lt;h2 id=&quot;easy-to-use&quot;&gt;Easy to Use&lt;/h2&gt;
&lt;p&gt;Features are supposed to make things easier. If the feature makes the overall process too complex, this is an utter failure of design. This is where expertise in UX and UI come in handy, as duly proven by this review.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-avoid-overdesign/healthly.png&quot; alt=&quot;Healthly, award wining telemedicine platform - another 5 start client review&quot; title=&quot;Healthly, award wining telemedicine platform - another 5 start client review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The client was quite happy with the advanced functionalities that the app provided while being easy to use for their customers.&lt;/p&gt;

&lt;p&gt;Another great example of how important is to facilaite ease of use via UI&amp;amp;UX is the case of &lt;a href=&quot;https://www.linkedin.com/posts/krzysztof-gasior_productmanagement-uxui-monetization-activity-6702359106499420160-yAeq/&quot;&gt;how Headspace had simplified their purchase flow&lt;/a&gt; which resulted with an increase of conversion rate by nearly 50%.&lt;/p&gt;

&lt;h2 id=&quot;do-not-reinvent-the-wheel&quot;&gt;Do not reinvent the wheel&lt;/h2&gt;
&lt;p&gt;Follow the design patterns and best practices - this will help you to maintain your work and avoid problems that others have already solved. Keep in mind that processes, tools and conventions lay at the core of a successful software development efforts.&lt;/p&gt;

&lt;p&gt;Do market research &amp;amp; competition analysis - it’s not a shame to check and learn from others about how they have approached and solved similar challenges. In fact that is the true nature of progress - avoid previously made mistakes while enriching the experience with new features.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Overdesign is a big threat, but one that you can definitely avoid, by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;focusing on features that matters&lt;/li&gt;
  &lt;li&gt;delivering iteratively &amp;amp; quickly&lt;/li&gt;
  &lt;li&gt;keeping things simple and intuitive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more, feel most welcome to &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;talk to our team&lt;/a&gt; today.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jul 2021 00:00:00 +0200</pubDate>
        <link>https://blog.iterative.engineering/2021/07/09/how-to-avoid-overdesigning/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/07/09/how-to-avoid-overdesigning/</guid>
        
        <category>Lean principles</category>
        
        <category>Iterative approach</category>
        
        <category>Good practices</category>
        
        <category>Overdesign</category>
        
        
      </item>
    
  </channel>
</rss>
