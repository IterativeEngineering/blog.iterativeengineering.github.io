<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iterative Engineering Blog</title>
    <description>Blog where we share our thoughts, reflections and experiences from building digital products and software at Iterative Engineering</description>
    <link>https://blog.iterative.engineering</link>
    <atom:link href="https://blog.iterative.engineering/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 Dec 2024 10:58:46 -0600</pubDate>
    <lastBuildDate>Fri, 20 Dec 2024 10:58:46 -0600</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>Europe's Spaceport selected Iterative Engineering to improve the payload preparation process</title>
        <description>&lt;p&gt;An Exciting time for us! We have been selected to work on the Proof of Concept system for Launch Campaign Information and Request Management at Guiana Space Center (CSG) operated by French Space Agency (CNES).&lt;/p&gt;

&lt;h2 id=&quot;project-motivation&quot;&gt;Project Motivation&lt;/h2&gt;

&lt;p&gt;Currently, there is no tool for creating, tracking or tracing a service request during the launch campaign period. Requests are made verbally, by email or by message, making it challenging to follow-up and track.&lt;/p&gt;

&lt;p&gt;To improve the experience of launch operators, payload customers and the spaceport staff during future launch campaigns, CSG plans to introduce a digital platform providing a service catalogue and facilitating processing and tracking of raised requests.&lt;/p&gt;

&lt;h2 id=&quot;project-scope&quot;&gt;Project Scope&lt;/h2&gt;

&lt;p&gt;While the PoC is supposed to showcase the feasibility of digitizing the process, it has concretely outlined functions and requirements. The outcome shall be operational and is intended to become a backbone for further developments, covering core concepts such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exposing the CSG services catalogue to simplify raising payload processing requests&lt;/li&gt;
  &lt;li&gt;Increasing request traceability for both the customer and the staff&lt;/li&gt;
  &lt;li&gt;Improving stakeholder’s experience by integrating the request lifecycle within a single tool&lt;/li&gt;
  &lt;li&gt;Streamlining campaign management by providing supporting workflows for typical activities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/sequence-for-processing-customer-request.webp&quot; alt=&quot;Sequence for processing customer request&quot; title=&quot;Sequence for processing customer request&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;winning-bid&quot;&gt;Winning Bid&lt;/h2&gt;

&lt;p&gt;According to feedback, the following features of our proposal convinced the CSG team to select our offer from almost a dozen competitors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;comprehensive approach&lt;/strong&gt; - we have conducted domain and requirement analysis, based on which we proposed a technical solution along with a clear execution plan,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;attention to detail&lt;/strong&gt; -  we have put a lot of effort into domain discussions and questions through the bid preparation process,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;alignment with outlined goals&lt;/strong&gt; - our offer had elements directly addressing all mentioned goals and motivations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we started working on the bid, we had discussed how to approach it, as while we were actively exploring the space industry for some time already, it was really the first (!) tender we were taking part in. The conclusion was that first and foremost we need to prove (to them and ourselves) that we have a deep understanding of &lt;strong&gt;WHY&lt;/strong&gt; they want to do it, &lt;strong&gt;WHAT&lt;/strong&gt; they actually need and &lt;strong&gt;HOW&lt;/strong&gt; can we deliver it.&lt;/p&gt;

&lt;h3 id=&quot;broader-picture&quot;&gt;Broader Picture&lt;/h3&gt;

&lt;p&gt;To achieve that, we started by analysing the payload preparation process, its surroundings and how it fits into the bigger picture. This very quickly led us to learn more about the launch campaign structure, different stakeholders and phases of that process. The exploration involved reading Launch Operator User Manuals, NASA and ESA publications and various other materials on the subject of launch planning, conducting and post operations. Obviously, we were focusing on the payload preparation process, but the research involved getting an understanding of the other aspects as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/launch-site-at-csg.webp&quot; alt=&quot;Launch site at CSG&quot; title=&quot;Launch site at CSG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, it is important to understand the launch campaign structure at CSG which consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The launcher campaign - initially focused on rocket assembly and launchpad preparations, followed by payload integration and finally assembly.&lt;/li&gt;
  &lt;li&gt;The spaceport preparation campaign - focused on ensuring ground facilities (such as radars, telemetry systems, etc.) at the Spaceport are 100% able to support the flight.&lt;/li&gt;
  &lt;li&gt;The spacecraft (payload) preparation campaign - focused on ensuring that the payload is 100% prepared for the launch and that it is fully functional. Covering aspects such as:
    &lt;ul&gt;
      &lt;li&gt;placing the satellite in a clean zone,&lt;/li&gt;
      &lt;li&gt;filling the satellite with propellant using specific equipment,&lt;/li&gt;
      &lt;li&gt;installation of satellite check-out consoles and ground mechanical equipment,&lt;/li&gt;
      &lt;li&gt;integration of separately shipped elements,&lt;/li&gt;
      &lt;li&gt;fitting the payload adaptor.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above are performed independently by different teams, but are carefully synchronised to ensure that all the components are ready in time for the final integration and launch date.&lt;/p&gt;

&lt;p&gt;Another example of an important aspect impacting the process is the variety of the payload setups. Different options have different implications on the spacecraft stakeholder teams impacting communication requirements. Specific configurations also require specific services and adequate operations during the preparation process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/various-payload-setups.webp&quot; alt=&quot;Broader Picture - various payload setups&quot; title=&quot;Broader Picture - various payload setups&quot; /&gt;
&lt;em&gt;Broader Picture - various payload setups&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During this process, we have identified many more relevant aspects which were extremely helpful for further requirements analysis and outlining the proposed solution sketch.&lt;/p&gt;

&lt;h3 id=&quot;submission-outline&quot;&gt;Submission Outline&lt;/h3&gt;

&lt;p&gt;Once we felt confident with our research we moved to preparing an outline of the proposal. The really good idea was to actually ask the CSG Team for confirmation on their expectations of proposal contents as we have quickly confirmed that the structure we proposed was relevant (as the tender did not define it). We ended up with the following scope:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WHY US - with general info about our company&lt;/li&gt;
  &lt;li&gt;COMMERCIAL - with an executive summary of the offer focused on scope and  commercials such as quotes, commitments and promised outputs.&lt;/li&gt;
  &lt;li&gt;TECHNICAL SUBMISSION - covering:
    &lt;ul&gt;
      &lt;li&gt;Broad Outlook - research on the broader picture of the process, different stakeholders and analogies&lt;/li&gt;
      &lt;li&gt;Requirements Analysis - review supplied requirements and discuss how to approach them&lt;/li&gt;
      &lt;li&gt;Offer Scope Definition - define and describe offered deliverables being a core and possible options extending it&lt;/li&gt;
      &lt;li&gt;Sketch of a Solution - showcase &amp;amp; example of proposed solution based on outlined requirements&lt;/li&gt;
      &lt;li&gt;Execution Plan - describe the plan for project execution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ATTACHMENTS - evidence of experience and skills, case studies, certificates etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having a clear and confirmed outline with a subsequent structure helped us greatly, as we used it as a plan for preparing the full contents of the bid.&lt;/p&gt;

&lt;h3 id=&quot;requirements-analysis&quot;&gt;Requirements Analysis&lt;/h3&gt;

&lt;p&gt;So the next thing to do was requirement analysis (both functional and non-functional) to ensure we are capable of addressing all of the required and potentially some of the optional tasks. This involved discussing things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;potential impact on the process,&lt;/li&gt;
  &lt;li&gt;review &amp;amp; reflection on expected functionality and how to provide it,&lt;/li&gt;
  &lt;li&gt;identifying use cases &amp;amp; workflows,&lt;/li&gt;
  &lt;li&gt;mapping of requirements to components &amp;amp; modules,&lt;/li&gt;
  &lt;li&gt;discussing ergonomic requirements and how to approach them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This led to conclusions on key requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;process information is captured and available,&lt;/li&gt;
  &lt;li&gt;oversight &amp;amp; insights are available at a glance,&lt;/li&gt;
  &lt;li&gt;means of automation are available and configurable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also allowed us to group functional requirements around different perspectives, which then served as a starting point for drawing the sketch of a solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/requirement-analysis-functions-groupped-by-different-perspectives.webp&quot; alt=&quot;Requirement Analysis - functions grouped by different perspectives&quot; title=&quot;Requirement Analysis - functions grouped by different perspectives&quot; /&gt;
&lt;em&gt;Requirement Analysis - functions grouped by different perspectives&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;sketch-of-a-solution&quot;&gt;Sketch of a Solution&lt;/h3&gt;

&lt;p&gt;Once the analysis was ready and we felt like we knew WHY and WHAT we moved into the HOW section drawing out potential solution describing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;conceptual &amp;amp; system architecture,&lt;/li&gt;
  &lt;li&gt;data model&lt;/li&gt;
  &lt;li&gt;integration with CSG systems,&lt;/li&gt;
  &lt;li&gt;PoC perspective vs Long term perspective,&lt;/li&gt;
  &lt;li&gt;used technologies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but most importantly we also drew a number of mockups &amp;amp; workflow which visually show what could be the outcome addressing specified needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/solution-sketch-sample-dashboard-design.webp&quot; alt=&quot;Solution Sketch - sample dashboard design&quot; title=&quot;Solution Sketch - sample dashboard design&quot; /&gt;
&lt;em&gt;Solution Sketch - sample dashboard design&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;execution-plan&quot;&gt;Execution Plan&lt;/h3&gt;

&lt;p&gt;Finally, we contextualized the solution in a detailed execution plan defining timelines, actions and outputs of various steps we have identified as required (or useful) to deliver the final outcome:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commencement&lt;/li&gt;
  &lt;li&gt;Workshop &amp;amp; Scope Alignment&lt;/li&gt;
  &lt;li&gt;Design Process&lt;/li&gt;
  &lt;li&gt;Development Process&lt;/li&gt;
  &lt;li&gt;Training &amp;amp; Documentation Process&lt;/li&gt;
  &lt;li&gt;Deployment &amp;amp; Verification Process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/execution-plan-planned-time-line.webp&quot; alt=&quot;Execution Plan - planned project timeline&quot; title=&quot;Execution Plan - planned project timeline&quot; /&gt;
&lt;em&gt;Execution Plan - planned project timeline&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, we also discussed Team Structure and its changes over time through the following phases explaining their responsibilities.&lt;/p&gt;

&lt;h2 id=&quot;progress-sneak-peek&quot;&gt;Progress sneak peek&lt;/h2&gt;

&lt;p&gt;So as we announce the good news the project is actually already ongoing and for the last few weeks we have been refining the initially proposed design &amp;amp; architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/design-and-analysis-sneak-peak-on-design-improvements.webp&quot; alt=&quot;Design &amp;amp; Analysis - sneak peek on design improvements&quot; title=&quot;Design &amp;amp; Analysis - sneak peak on design improvements&quot; /&gt;
&lt;em&gt;P1 Design &amp;amp; Analysis - sneak peek on design improvements&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Together with CSG Team we have gone through a number of detailed domain discussions about various aspects of the process and the specific environment characteristics in order to confirm scope and functional expectations, touching on subjects like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Current approach to request management&lt;/li&gt;
  &lt;li&gt;Spaceport and Spacecraft Stakeholders’ structures and its impact on the process&lt;/li&gt;
  &lt;li&gt;Workflows needed to support various types of requests&lt;/li&gt;
  &lt;li&gt;Details of Service Catalogue offering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay tuned for further updates! :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/csg-poc-implementation.webp&quot; alt=&quot;Project implementation has already started&quot; title=&quot;Project implementation has already started&quot; /&gt;
&lt;em&gt;Project implementation has already started&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Dec 2024 00:00:00 -0600</pubDate>
        <link>https://blog.iterative.engineering/2024/12/19/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2024/12/19/europe-spaceport-selected-iterative-engineering-to-improve-the-payload-preparation-process/</guid>
        
        <category>Business</category>
        
        <category>Official</category>
        
        <category>Announcement</category>
        
        <category>Projects</category>
        
        <category>Space Industry</category>
        
        <category>Space Tech</category>
        
        <category>Space Engineering</category>
        
        <category>Spaceport</category>
        
        <category>Guiana Space Centre (CSG)</category>
        
        <category>CNES</category>
        
        <category>Analysis</category>
        
        <category>Good Practices</category>
        
        
        <category>business</category>
        
      </item>
    
      <item>
        <title>Iterative Engineering changes its address</title>
        <description>&lt;p&gt;Iterative Engineering sp. z o. o. with its registered office in Zabrze, registered in the Register of Entrepreneurs of the National Court Register kept by the District Court in Gliwice, 10th Commercial Division of the National Court Register under the KRS number 0000900004, NIP: 6482804153, REGON: 388898977,&lt;/p&gt;

&lt;p&gt;announces that its address will change as of 1&lt;sup&gt;st&lt;/sup&gt; of October 2024 to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ul. Wolności 191 lok. 913, 41-800 Zabrze&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The previous address: ul. Wolności 191 lok. 311, 41-800 Zabrze, remains valid till end of September 2024.&lt;/p&gt;

&lt;p&gt;At the same time, we would like to inform you that the change concerns only the Company’s address - all other data, including NIP, KRS, bank account numbers, telephone numbers, as well as e-mail addresses, remain unchanged. Please include the above change in all new documents issued for the Company starting from 1 October 2024. At the same time, we would like to mention that, in accordance with the applicable legal regulations, a change of the Company’s address does not have the effect of changing the entity that was and still is a party to the contracts already concluded. A change of the Company’s address does not result in any modification of the Company’s obligations or mutual rights and obligations under the agreements concluded by our Company and does not require their annexation. The change of the Company’s address takes effect as soon as it is made, and the relevant update of data in the National Court Register will take place within approximately two months.&lt;/p&gt;

&lt;h1 id=&quot;informal-message&quot;&gt;Informal Message&lt;/h1&gt;

&lt;p&gt;So after spending nearly 7 years at office 311 on Wolności 191 (since 1st of November 2017) it is time for a small change. We move to a different one. Not far indeed, as we stay in the same building but just change the floor from 3rd to 9th, preparing to occupy office 913, which shall happen from on 1st of October.&lt;/p&gt;

&lt;p&gt;The new office shall provide us with more work and social space, therefore should address our current needs better. Not to mention it should also provide quite a better view of the Silesia panorama.&lt;/p&gt;

&lt;p&gt;The setup operations and transfers have already begun and gave our team some interesting challenges :), following are just a few scenese from the process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iterative-engineering-new-address/face-palm.webp&quot; alt=&quot;Desks are just the begining&quot; title=&quot;Desks are just the begining&quot; /&gt;
&lt;em&gt;Desks are just the begining…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iterative-engineering-new-address/duel-between-employes.webp&quot; alt=&quot;In between duel&quot; title=&quot;In between duel&quot; /&gt;
&lt;em&gt;Swords were certified for training :&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iterative-engineering-new-address/quick-work.webp&quot; alt=&quot;In between code fixes&quot; title=&quot;In between code fixes&quot; /&gt;
&lt;em&gt;When there was a need for in between code fixes :P&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iterative-engineering-new-address/beer-time.webp&quot; alt=&quot;Ain't no move without a beer&quot; title=&quot;Ain't no move without a beer&quot; /&gt;
&lt;em&gt;Ain’t no move without a beer…&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Sep 2024 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2024/09/12/iterative-engineering-new-address/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2024/09/12/iterative-engineering-new-address/</guid>
        
        <category>Business</category>
        
        <category>Official</category>
        
        <category>Announcement</category>
        
        
        <category>business</category>
        
      </item>
    
      <item>
        <title>Iterative Engineering delivers AI solution for biomethane plant development</title>
        <description>&lt;p&gt;Recently we teamed up with Nature Energy to create two bespoke software solutions to meet their business development challenges in biogas project development. A highlight of this collaboration is the Screening Tool, an innovative automated system for detecting objects of interest through algorithmic analysis of satellite and orthoimagery together with the digital elevation model.&lt;/p&gt;

&lt;h2 id=&quot;the-screening-tool&quot;&gt;The Screening Tool&lt;/h2&gt;

&lt;p&gt;The solution features three main components, each working in sequence:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data Collector&lt;/strong&gt; – A script designed to fetch imagery for a specified area from a designated source.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Analytical Engine&lt;/strong&gt; – A powerful combination of AI/ML and mathematical computer vision algorithms that processes the retrieved imagery to pinpoint objects of interest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt; – A tool that compiles the analysis results into a comprehensive output package, ensuring only relevant data is included.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The detection process yields detailed results, providing exhaustive information about each identified object, including location, size, volume, and associated imagery. This structured data is ready for seamless integration into any third-party GIS system, facilitating further analysis and informed decision-making.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Iterative Engineering’s work has been highly detailed and has met expectations. The team is meticulous, on time, and proactive.”&lt;br /&gt;&lt;br /&gt;
&lt;cite&gt;Dorota Fennessy, Head of Business Development at Nature Energy - Biomethane&lt;br /&gt;&lt;a style=&quot;cursor: pointer !important; font-weight: normal; color: grey&quot; href=&quot;https://clutch.co/profile/iterative-engineering#review-299025&quot; target=&quot;_blank&quot;&gt; &amp;gt; Read the full review on Clutch&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Nature Energy team has supplied experienced and seasoned experts who have tested the model and provided insightful, timely feedback, making the tool a product of co-creation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iterative-delivers-innovative-solution-for-biomethane/orthoimagery-dem.webp&quot; alt=&quot;Orthoimagery combined with DEM data&quot; title=&quot;Orthoimagery combined with DEM data&quot; /&gt;
&lt;em&gt;Orthoimagery combined with DEM data – input sources for the Analytical Engine&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;turning-waste-into-energy&quot;&gt;Turning waste into energy&lt;/h2&gt;

&lt;p&gt;Nature Energy owns and operates 14 biogas plants located throughout Denmark and the Netherlands with more new projects in the pipeline. 
The company is the market leader in turning biomass into green, CO₂-neutral gas as effectively as possible. They collect and deliver biomass – waste from agriculture, industry and households – and return the degassed biomass to the agriculture that recycles nutrients. This is circular economy at its best.&lt;/p&gt;

&lt;p&gt;In 2022 Nature Energy’s biogas plants treated more than 4.7 million tonnes of biomass, converting it into more than 185 million m³ of green gas. That much biogas could be used to fuel almost 8,200 busses driving 30,000 miles per year, or to heat 160,000 homes. All of this is CO₂ neutral as well as replacing fossil fuels.&lt;/p&gt;

&lt;p&gt;Since 2023 Nature Energy operates as Shell’s wholly-owned subsidiary.&lt;/p&gt;

&lt;p&gt;Learn more at &lt;a href=&quot;https://nature-energy.com/&quot; target=&quot;_blank&quot;&gt;nature-energy.com&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jul 2024 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2024/07/12/iterative-delivers-innovative-solution-for-biomethane/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2024/07/12/iterative-delivers-innovative-solution-for-biomethane/</guid>
        
        <category>Business</category>
        
        <category>Projects</category>
        
        <category>Energy Transition</category>
        
        <category>Oil &amp; Gas</category>
        
        <category>Renewables</category>
        
        <category>AI</category>
        
        <category>GIS</category>
        
        <category>Machine Learning</category>
        
        <category>Image Recognition</category>
        
        <category>Official</category>
        
        <category>Announcement</category>
        
        
        <category>business</category>
        
      </item>
    
      <item>
        <title>Secure VPS with CloudFlare Zero Trust in 5min</title>
        <description>&lt;p&gt;You’ve probably heard about the &lt;strong&gt;xz backdoor&lt;/strong&gt;, which has unsettled admins all around the world, and you likely still remember Log4Shell - another CVE10 that sent shockwaves through IT security teams a few years back.&lt;/p&gt;

&lt;p&gt;What if I told you that for in-company (and beyond) apps, you can easily reduce exposure to such vulnerabilities?&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Zero Trust&lt;/strong&gt; network can provide you with a second layer of security to protect your infrastructure. It’s a cloud-suited, highly scalable alternative solution to VPNs or Citrix.&lt;/p&gt;

&lt;p&gt;This article presents an example architecture of a Zero Trust &lt;strong&gt;network&lt;/strong&gt;. Additionally, it provides a tutorial on how to build your first Zero Trust network using Cloudflare.&lt;/p&gt;

&lt;p&gt;We chose &lt;strong&gt;Cloudflare&lt;/strong&gt; as an example Zero Trust network provider because, at Iterative Engineering, we’ve integrated Cloudflare solutions to secure our internal infrastructure&lt;/p&gt;
&lt;h4 id=&quot;who-may-find-this-article-helpful&quot;&gt;Who may find this article helpful&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Security Professionals responsible for safeguarding their organization’s infrastructure against cybersecurity threats&lt;/li&gt;
  &lt;li&gt;Administrators and Network Engineers involved in the deployment and management of IT infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-will-you-learn&quot;&gt;What will you learn&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The article will provide a detailed tutorial on building a Zero Trust network using Cloudflare as an example provider.&lt;/li&gt;
  &lt;li&gt;What are the advantages and risks of selecting a Zero Trust Network provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Cloudflare account. It’s free to create, but you must provide credit card details during registration. The services presented in this article are free for &amp;lt;50 users.&lt;/li&gt;
  &lt;li&gt;VPS like free EC2 instance on AWS or even your private laptop as the host&lt;/li&gt;
  &lt;li&gt;Docker installed on the machine. It’s not a strict requirement, but with Docker it’s just easier&lt;/li&gt;
  &lt;li&gt;Registered domain like iterative.pl. It’s slightly easier to manage the network if the domain is registered in Cloudflare, and this article assumes that you have set it like that&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;steps-over-well-go-through&quot;&gt;Steps over we’ll go through&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Zero Trust network definition&lt;/li&gt;
  &lt;li&gt;Setting up Zero Trust network with Cloudflare&lt;/li&gt;
  &lt;li&gt;Securing the app by Google authentication provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-zero-trust-security&quot;&gt;What is Zero Trust security?&lt;/h2&gt;
&lt;p&gt;It’s an IT security model where access to resources on a private network is granted only after thorough verification of the identity of every person and device seeking access.&lt;/p&gt;

&lt;p&gt;This is the architecture schema of Cloudflare Zero Trust
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image0.webp&quot; alt=&quot;Architecture schema of Cloudflare Zero Trust&quot; title=&quot;Architecture schema of Cloudflare Zero Trust&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the user perspective - there is no difference, no need to install any apps or additional software (required in VPN networks).
On the server side - the big difference is that the request first hits the Zero Trust provider infrastructure,
and then via the tunnel, it goes to the service that handles it. The response comes back accordingly - via the tunnel.&lt;/p&gt;

&lt;h2 id=&quot;configure-the-cloudflared-tunnel&quot;&gt;Configure the Cloudflared tunnel&lt;/h2&gt;

&lt;p&gt;So, let’s dive in and begin configuring the tunnel!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Log in to your &lt;a href=&quot;https://one.dash.cloudflare.com/&quot;&gt;Cloudlfare Zero Trust&lt;/a&gt; account&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under the &lt;strong&gt;Networks&lt;/strong&gt; tab open &lt;strong&gt;Tunnels&lt;/strong&gt; and click &lt;strong&gt;Create a tunnel&lt;/strong&gt;
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image1.webp&quot; alt=&quot;Create Tunnel&quot; title=&quot;Create Tunnel&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This art focuses on the &lt;strong&gt;Cloudflared&lt;/strong&gt; connector, so select this one as the type of tunnel:
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image2.webp&quot; alt=&quot;Select Connector&quot; title=&quot;Select Connector&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name your &lt;strong&gt;tunnel&lt;/strong&gt; however you want and save it:
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image3.webp&quot; alt=&quot;Name your tunnel&quot; title=&quot;Name your tunnel&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose the OS on which the tunnel will be hosted. This article presents how to do it via &lt;strong&gt;Docker&lt;/strong&gt; because then you can run it almost anywhere
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image4.webp&quot; alt=&quot;Select Connector OS&quot; title=&quot;Select Connector OS&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the docker command generated by the configurator. As the warning suggests the &lt;strong&gt;token&lt;/strong&gt; parameter should be kept in secrecy
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image5.webp&quot; alt=&quot;Copy the command&quot; title=&quot;Copy the command&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final step in the configurator involves setting a &lt;strong&gt;Public Hostname&lt;/strong&gt; for your Zero Trust network. This necessitates setting up a domain first. 
Cloudflare will create the subdomain if you specify it
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image6.webp&quot; alt=&quot;Setup public hostname&quot; title=&quot;Setup public hostname&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Service section, you choose which resource on the server the traffic is proxied to
It’s set to &lt;strong&gt;http://nginx:80&lt;/strong&gt;, aligning with the docker-compose example provided below
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image6_1.webp&quot; alt=&quot;Select service type and url&quot; title=&quot;Select service type and url&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;public-hostnames-vs-private-hostnames&quot;&gt;Public Hostnames vs Private Hostnames&lt;/h3&gt;
&lt;p&gt;In the Public hostnames, you need to choose the domain (or subdomain) &lt;strong&gt;associated&lt;/strong&gt; with the tunneled service. Under this DNS name, the service will be accessible on the public internet.&lt;/p&gt;

&lt;p&gt;Private Networks allow Zero Trust communication between services without &lt;strong&gt;exposing&lt;/strong&gt; them to the public internet, so we don’t need to configure it in our example.&lt;/p&gt;

&lt;h2 id=&quot;configure-the-cloudflared-connector&quot;&gt;Configure the Cloudflared connector&lt;/h2&gt;
&lt;p&gt;Now, it’s time to set up the Cloudflared &lt;strong&gt;connector&lt;/strong&gt; on the server. While you could use the Docker command generated by the configurator, for full-featured functionality,
it’s easier to utilize this handy &lt;strong&gt;Docker Compose&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;First, save it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; on your server. Just set your &lt;strong&gt;token&lt;/strong&gt; by replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;your_secret_token&lt;/code&gt; placeholder&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;cloudflared&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cloudflare/cloudflared&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tunnel run&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TUNNEL_TOKEN=your_secret_token&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then start the &lt;strong&gt;containers&lt;/strong&gt; by executing&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This starts two containers: &lt;strong&gt;nginx&lt;/strong&gt; to host its default html file and the Cloudflared &lt;strong&gt;connector&lt;/strong&gt;.
The connector opens an outbound connection from your host to the Cloudflare infrastructure,
routing all requests executed against zero-trust-subdomaine.your_domain.com (in our example, zero-trust.iterative.pl) 
through the Cloudflare infrastructure.&lt;/p&gt;

&lt;p&gt;Such a page is an expected output in your favorite browser
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image7.webp&quot; alt=&quot;Nginx welcome page&quot; title=&quot;Nginx welcome page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These simple steps provided your serve with&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SSL certificate&lt;/strong&gt; issued and automatically renewed by Cloudflare&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTPS inspection&lt;/strong&gt; (Cloudflare decrypts packages to inspect them and detect malware)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DOS/DDos protection&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition - the connector can expose services from machines that do not even have a public IP address&lt;/p&gt;

&lt;p&gt;But that’s not all. You can configure finely-grained, restricted access to your application,
allowing access only to users who authenticate themselves, for example, via a &lt;strong&gt;Google account&lt;/strong&gt;.
This approach fits perfectly for all company-internal applications.&lt;/p&gt;

&lt;h2 id=&quot;restrict-access-to-your-application&quot;&gt;Restrict access to your application&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open &lt;strong&gt;Applications&lt;/strong&gt; and &lt;strong&gt;Add an application&lt;/strong&gt;
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image8.webp&quot; alt=&quot;Configure applications&quot; title=&quot;Configure applications&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Our nginx app is &lt;strong&gt;self-hosted&lt;/strong&gt;, so this is the option that have to be selected
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image8_1.webp&quot; alt=&quot;Self Hosted App&quot; title=&quot;Self Hosted App&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose the application name and refer to the same &lt;strong&gt;subdomain/domain&lt;/strong&gt; as the configured tunnel (other options have sensible defaults).
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image9.webp&quot; alt=&quot;App Configuration&quot; title=&quot;App Configuration&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s add a &lt;strong&gt;policy&lt;/strong&gt; that allows only users with a specific email. First set the policy name and the &lt;strong&gt;allow&lt;/strong&gt; action
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image10.webp&quot; alt=&quot;Add policy&quot; title=&quot;Add policy&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure an &lt;strong&gt;include&lt;/strong&gt; rule that accepts requests only from &lt;strong&gt;authenticated&lt;/strong&gt; users that have specific email(s)
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image10_1.webp&quot; alt=&quot;Add rule&quot; title=&quot;Add rule&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since &lt;strong&gt;cookies&lt;/strong&gt; and CORS settings are irrelevant in our example, simply click on &lt;strong&gt;Add application&lt;/strong&gt;
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image10_2.webp&quot; alt=&quot;Save application&quot; title=&quot;Save Application&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your app is now visible on the list of &lt;strong&gt;applications&lt;/strong&gt;
&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image11.webp&quot; alt=&quot;List of applications&quot; title=&quot;List of applications&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All requests to the application are authenticated against the application policies. If the user is not &lt;strong&gt;authenticated&lt;/strong&gt;,
they are &lt;strong&gt;redirected&lt;/strong&gt; to the Google authentication login page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image11_1.webp&quot; alt=&quot;Login page&quot; title=&quot;Login page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloudflare enables the configuration of advanced &lt;strong&gt;policies&lt;/strong&gt; based on request IP location, IP ranges, and email domains, etc.
Additionally, ‘service’ tokens are available to facilitate communication between apps within the &lt;strong&gt;Zero-Trust&lt;/strong&gt; network.&lt;/p&gt;

&lt;h3 id=&quot;overview-of-the-solutions-architecture&quot;&gt;Overview of the solution’s &lt;strong&gt;architecture&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/secure-vps-with-cloud-flare-zero-trust-in-5min/image12.webp&quot; alt=&quot;Architecture overview&quot; title=&quot;Architecture overview&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;risks-you-accept-by-relaying-on-a-zero-trust-provider&quot;&gt;Risks you accept by relaying on a Zero Trust provider:&lt;/h2&gt;

&lt;p&gt;Zero Trust means that you trust nobody except your &lt;strong&gt;zero trust&lt;/strong&gt; provider.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If the provider controls the SSL certificate, they may conduct &lt;strong&gt;deep packet inspection&lt;/strong&gt; (as Cloudflare does). This capability allows them to filter out malicious content, but it also means the provider has access to all data transmitted through their infrastructure. Alternatively, you can issue the SSL certificate yourself e.g. using Let’s Encrypt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Outages of your provider may mean an outage of your services, e.g. Cloudflare &lt;strong&gt;outage&lt;/strong&gt; on June 21, 2022.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-did-we-select-the-zero-trust-cloudfare-network-at-iterative-engineering&quot;&gt;Why did we select the Zero Trust Cloudfare network at Iterative Engineering?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;To reduce exposure to &lt;strong&gt;0-day&lt;/strong&gt; vulnerabilities, we sought to establish a first layer of security independent of the security provided by the underlying applications, such as Gitlab or Mattermost&lt;/li&gt;
  &lt;li&gt;To not require users to install any VPN apps on their laptops or mobile devices to access the services, they can simply &lt;strong&gt;authenticate&lt;/strong&gt; via their Google account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;You can build your first Zero-Trust &lt;strong&gt;network&lt;/strong&gt; for free with Cloudflare&lt;/li&gt;
  &lt;li&gt;Cloudflare Zero Trust has various &lt;strong&gt;built-in&lt;/strong&gt; features, including DDoS protection, monitoring, HTTPS inspection, Google authentication, and many others&lt;/li&gt;
  &lt;li&gt;Since the Cloudflare tunnel opens an &lt;strong&gt;outbound&lt;/strong&gt; connection, your services do not require public IP addresses to be accessible&lt;/li&gt;
  &lt;li&gt;The Zero Trust network is a concept that competes with &lt;strong&gt;VPNs&lt;/strong&gt; and, like VPNs, has many providers that may provide different sets of features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further reading:
&lt;a href=&quot;https://developers.cloudflare.com/cloudflare-one/&quot;&gt;&lt;strong&gt;Cloudlfare Zero Trust - Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Apr 2024 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2024/04/29/secure-vps-with-cloud-flare-zero-trust-in-5min/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2024/04/29/secure-vps-with-cloud-flare-zero-trust-in-5min/</guid>
        
        <category>Security</category>
        
        <category>Cloud</category>
        
        <category>Zero Trust Network</category>
        
        <category>Cloudflare Zero Trust</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>Strengths and Limitations of Knip for Unused Code Detection in Angular</title>
        <description>&lt;p&gt;As the codebase grows and evolves, the cost of maintaining it becomes higher. In extreme cases, leading to situations
where upkeep takes significantly more time and effort than new developments. While you cannot prevent balancing out of
those proportions overtime, there are ways to mitigate the risk of ending up in an endless maintenance loop. One of such
is identification and removal of unused or overhead code to decrease complexity.&lt;/p&gt;

&lt;p&gt;This article will delve into the capabilities of Knip tool that identifies unused code in Angular based applications.
It advertises itself as a tool that “finds unused files, dependencies and exports in your JavaScript and TypeScript
projects. Less code and dependencies lead to improved performance, less maintenance and easier refactorings”.
Gaining popularity in the JavaScript ecosystem based on &lt;a href=&quot;https://www.npmjs.com/package/knip&quot;&gt;NPM weekly downloads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fully understand Knip’s effectiveness, we will comprehensively evaluate it in real-world application. In the upcoming
section, we will evaluate its performance in identifying unused code in the Adscore project, which we are developing
and maintaining at Iterative. Additionally, we will analyze Knip’s ability to navigate complex code within a sandbox
Angular project in a controlled environment. This two-pronged approach will check Knip’s versatility and provide
insights into its capabilities in Angular codebases.&lt;/p&gt;

&lt;h1 id=&quot;real-world-project&quot;&gt;Real world project&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://adscore.com/&quot;&gt;Adscore&lt;/a&gt; allows users to categorize web traffic into distinct buckets like organic, paid, bot-generated, and low-quality. The app acts as a shield for ad budgets. The detailed comprehension guarantees that resources are directed towards the intended audience - real users - thereby maximizing campaign efficiency and return on investment.&lt;/p&gt;

&lt;h2 id=&quot;projects-statistics&quot;&gt;Projects Statistics&lt;/h2&gt;

&lt;p&gt;The following statistics provide an idea of the size of the Adscore system.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Language&lt;/th&gt;
      &lt;th&gt;Files&lt;/th&gt;
      &lt;th&gt;Lines of code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TypeScript&lt;/td&gt;
      &lt;td&gt;248&lt;/td&gt;
      &lt;td&gt;26995&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCSS&lt;/td&gt;
      &lt;td&gt;112&lt;/td&gt;
      &lt;td&gt;16535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HTML&lt;/td&gt;
      &lt;td&gt;78&lt;/td&gt;
      &lt;td&gt;12822&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The total count of Components, Pipes, and Directives is 74.&lt;/p&gt;

&lt;h2 id=&quot;ignore-file&quot;&gt;Ignore File&lt;/h2&gt;

&lt;p&gt;After several iterations due to Knip incorrectly detecting in-use packages, following ignore file was created:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;angular.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// both files used in angular.json file&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Karma.conf.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src/polyfills.ts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ignoreDependencies&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// used in angular.json&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@angular-eslint/schematics&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@angular-eslint/template-parser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eslint-config-prettier&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;jasmine-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Karma-chrome-launcher&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// used by Karma, several more plugins enlisted but removed for brevity&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// imported in global styles.scss, Knip lacks Sass plugin at the time of writing&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;loaders.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;husky&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// used in package.json&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pretty-quick&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// used by husky&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;simple-line-icons&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// used in custom script&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some dependencies are used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; file, some in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sass&lt;/code&gt; files. This is something that can
be improved in the plugins used by Knip.&lt;/p&gt;

&lt;h2 id=&quot;knip-scan-results-summary&quot;&gt;Knip Scan Results Summary&lt;/h2&gt;

&lt;p&gt;Knip created following report after creation of ignore file (Knip provides list of unused components for each section, those details are removed for brevity):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Unused files (11)
Unused dependencies (3)
Unused devDependencies (5)
Unused exports (10)
Unused exported types (1)
Configuration issues (1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In total, Knip allowed us to detect and remove 435 lines of code (which is 1.61% of total LOC) and 16 files.&lt;/p&gt;

&lt;p&gt;While integrating Knip with our Angular project, optimizing the knip.jsonc file required multiple iterations to ensure
accurate detection of unused code. However, this configuration effort was a one-time investment; moving forward, we can
seamlessly integrate Knip into our post-refactoring workflow for recurring analysis. While inclusion in the automated
pipeline is pending further evaluation, Knip has already proven its potential as a valuable tool for our codebase
optimization. Despite Knip’s detection capabilities, we identified additional unused assets that require further
investigation. We’ll be exploring this scenario within a controlled sandbox environment to gain deeper insights.&lt;/p&gt;

&lt;h1 id=&quot;sandbox-project&quot;&gt;Sandbox Project&lt;/h1&gt;

&lt;p&gt;A project containing unused code has been prepared. The objective is to identify all unused cases, which are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;7 class properties&lt;/li&gt;
  &lt;li&gt;10 class methods&lt;/li&gt;
  &lt;li&gt;2 interface properties&lt;/li&gt;
  &lt;li&gt;2 variables&lt;/li&gt;
  &lt;li&gt;1 constant&lt;/li&gt;
  &lt;li&gt;5 classes (Angular’s: Component, Directive, Module, Pipe, Service)&lt;/li&gt;
  &lt;li&gt;1 dependency (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/forms&lt;/code&gt; - installed by default but unused in the project, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;1 devDependency (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;1 unused export (variable used locally)&lt;/li&gt;
  &lt;li&gt;2 NgRx Actions (functions)&lt;/li&gt;
  &lt;li&gt;1 NgRx Effect (class)&lt;/li&gt;
  &lt;li&gt;2 functions - one is unit tested&lt;/li&gt;
  &lt;li&gt;1 asset&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Total: 36&lt;/p&gt;

&lt;p&gt;Code is available at: &lt;a href=&quot;https://github.com/IterativeEngineering/blog.angular-knip-unused-code-article&quot;&gt;https://github.com/IterativeEngineering/blog.angular-knip-unused-code-article&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;intentional-challenges&quot;&gt;Intentional Challenges&lt;/h2&gt;

&lt;p&gt;Some of the parts of the code are directly unused, which should be easy to detect by the tool. Some are trickier like
for example: an interface has a property, then the object implementing the interface, has the property
defined, but property itself is unused as in the following snippet:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InUseFeatureState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;definedButUnusedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InUseFeatureState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;definedButUnusedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ideally, an unused interface property should be detected on a first run. But iteratively also will do the job:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run the tool&lt;/li&gt;
  &lt;li&gt;Identify and remove the detected code&lt;/li&gt;
  &lt;li&gt;Run the tool again&lt;/li&gt;
  &lt;li&gt;Repeat until no more unused code is detected&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;analyzing-knip-results&quot;&gt;Analyzing Knip Results&lt;/h2&gt;

&lt;p&gt;Tested with following versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Angular - v17.0.5&lt;/li&gt;
  &lt;li&gt;Knip - v5.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Command used:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx knip &lt;span class=&quot;nt&quot;&gt;--include&lt;/span&gt; classMembers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since Knip version 4, class members are &lt;a href=&quot;https://knip.dev/blog/knip-v4#unused-class-members&quot;&gt;opted out by default&lt;/a&gt;, 
but given Angular’s heavy class usage, enabling it seemed beneficial.&lt;/p&gt;

&lt;p&gt;Result of the first Knip scan (details of each section removed for brevity):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Unused files (6)
Unused dependencies (3)
Unused devDependencies (8)
Unlisted binaries (2)
Unused exports (4)
Unused exported class members (16)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s review each section’s outcome individually.&lt;/p&gt;

&lt;h2 id=&quot;unused-files&quot;&gt;Unused files&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;No&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Detection&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Remarks&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused-function.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Even when in barrel file (index.ts) Knip was able to detect this file correctly.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused.service.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Service is exported but it is unused&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused-type.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Types are exported but not used anywhere in the code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused.util.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Util is exported but not used anywhere in the code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused-feature.module.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Module is exported but not used anywhere in the cod&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.eslintrc.js&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used by ES Lint&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detected: 5 files of 6 were detected correctly.&lt;/p&gt;

&lt;h2 id=&quot;unused-dependencies&quot;&gt;Unused dependencies&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;No&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Dependency&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Detection&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Remarks&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@angular/compiler&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Not directly used in the project, but for example @angular-devkit/build-angular depends on it, so it will be installed anyway in package-lock.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@angular/forms&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Forms are installed by Angular by default, but this test project does not use them.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@angular/platform-browser-dynamic&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Not directly used in the project but other Angular liblaries depends on it, will be installed anyway in package-lock.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused.util.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Util is exported but not used anywhere in the code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unused-feature.module.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Module is exported but not used anywhere in the code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.eslintrc.js&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used by ES Lint&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detected: 1 of 1 – 2 other dependencies have been detected as unused, but are used by Angular, won’t be included in the final score.&lt;/p&gt;

&lt;h2 id=&quot;unused-devdependencies&quot;&gt;Unused devDependencies&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;No&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Dependency&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Detection&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Remarks&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;express&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unused in the project&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;husky&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used in package.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;jasmine-core&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Installed by Angular and used during testing, but can be removed because it will be installed as a sub-dependency&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;karma-chrome-launcher&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Installed by Angular, cannot run tests without it&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;karma-coverage&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Can be used by Karma to generate coverage report, installed by default by Angular&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;karma-jasmine&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used by Karma&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;karma-jasmine-html-reporter&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used by Karma&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lint-staged&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used by Husky&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detected: 1 of 1 - All detected but with false positives.&lt;/p&gt;

&lt;h2 id=&quot;unlisted-binaries&quot;&gt;Unlisted binaries&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;No&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Binary&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Detection&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Remarks&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;eslint&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Listed as script in package.json and run by lint-staged&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;prettier&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Listed in lint-staged script&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detected: 0 of 0 - Did not expect to find any binaries, as the code was not prepared for this case. Anyway all were false positives.&lt;/p&gt;

&lt;h2 id=&quot;unused-exports&quot;&gt;Unused exports&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;No&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Export&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Detection&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Remarks&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UNUSED_CONSTANT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;constants.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Constant is exported but unused&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedAction1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;in-use-feature.actions.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Action is exported but unused&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedSelector1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;in-use-feature.selectors.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Selector is exported but unused&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rootState&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;in-use-feature.selectors.ts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Selector is exported but only used locally&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detected: 4 of 4 - Found one expected export and 3 unused Actions and Selectors.&lt;/p&gt;

&lt;h2 id=&quot;unused-exported-class-members&quot;&gt;Unused exported class members&lt;/h2&gt;

&lt;p&gt;The biggest part of the Knip result, and most likely the biggest part of any Angular application.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;No&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Class Member&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Detection&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Remarks&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedEffect$&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseFeatureEffects&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedEmitAction&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseFeatureStateFacade&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseFeatureStateFacade&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseFeatureStateFacade&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedPublicMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnusedComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnusedComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Partially correct, because component is unused, but this variable is used in HTML (which was not recognized)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedPublicMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnusedComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnusedComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Partially correct, because component is unused, but this variable is used in HTML (which was not recognized)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unusedMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseService&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Correct&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;AppComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used in HTML file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;13&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseAction1Effect$&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseFeatureEffects&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used by NgRx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used in HTML file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseStoreProperty$&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used in HTML file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;inUseMethod&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InUseComponent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Incorrect&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Used in HTML file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Detected: 11 of 17&lt;/p&gt;

&lt;h2 id=&quot;summary-of-first-run&quot;&gt;Summary of first run&lt;/h2&gt;

&lt;p&gt;In its initial run, Knip successfully identified 22 out of 36 cases, demonstrating a promising detection rate. However, it’s important to note that 14 of the findings were classified as false positives, highlighting the need for further refinement.&lt;/p&gt;

&lt;p&gt;Code removed after the first run can be found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clean-up-after-knip-v5-detection&lt;/code&gt; branch.&lt;/p&gt;

&lt;h2 id=&quot;subsequent-launches&quot;&gt;Subsequent launches&lt;/h2&gt;

&lt;p&gt;Knip’s second run yielded an additional 2 detections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;inUseActionInUnusedEffect&lt;/li&gt;
  &lt;li&gt;unusedSelector2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Total identified cases: 24 out of 36. Subsequent launches did not detect any additional code.&lt;/p&gt;

&lt;h2 id=&quot;missed-parts&quot;&gt;Missed Parts&lt;/h2&gt;

&lt;p&gt;Let’s check which scenarios were not detected:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UnusedPipe - most probably not found due to being defined in Angular Module which is in use&lt;/li&gt;
  &lt;li&gt;UnusedPath - same as above&lt;/li&gt;
  &lt;li&gt;UnusedComponent - same as above&lt;/li&gt;
  &lt;li&gt;UnusedDirective - same as above&lt;/li&gt;
  &lt;li&gt;unusedUtilButTestedFunction - function is unused, but unit tested - most probably because Knip does not have (unlike
Jest) plugin for Jasmine it recognized this function as in use&lt;/li&gt;
  &lt;li&gt;unusedPrivateProperty - Haven’t been detected, but ESLint or IDE’s like Visual Studio Code are capable to mark
this case as unused&lt;/li&gt;
  &lt;li&gt;unusedPrivateProperty2 - same as above&lt;/li&gt;
  &lt;li&gt;unusedPrivateMethod - same as above&lt;/li&gt;
  &lt;li&gt;definedButUnusedState - same as above&lt;/li&gt;
  &lt;li&gt;unusedState - same as above&lt;/li&gt;
  &lt;li&gt;unused.svg - looks like assets files were not checked at all&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;a-summary-of-knips-efficiency-with-angular&quot;&gt;A Summary of Knip’s Efficiency with Angular&lt;/h1&gt;

&lt;p&gt;Understanding Knip’s capabilities and limitations is crucial for leveraging its power in Angular. Let’s explore its
current performance, areas for improvement, and practical tips to optimize your code analysis process.&lt;/p&gt;

&lt;p&gt;Strengths:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Detects unused functions and exports efficiently&lt;/li&gt;
  &lt;li&gt;Can help reduce code complexity and improve maintainability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Weaknesses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May require multiple iterations for complex projects&lt;/li&gt;
  &lt;li&gt;In the context of Angular:
    &lt;ul&gt;
      &lt;li&gt;Cannot find unused Components, Pipes etc if defined in Module because, and currently does not analyze HTML templates&lt;/li&gt;
      &lt;li&gt;Can detect unused Actions/Selectors (NgRx) but not Effects/Reducers&lt;/li&gt;
      &lt;li&gt;Detects class properties used in HTML templates as unused&lt;/li&gt;
      &lt;li&gt;Doesn’t fully support Angular’s default test framework (Jasmine)&lt;/li&gt;
      &lt;li&gt;May misinterpret certain devDependencies as unused&lt;/li&gt;
      &lt;li&gt;Dependencies used only in Sass files are falsely detected as unused&lt;/li&gt;
      &lt;li&gt;Assets are not checked&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Package.json scripts: limited detection in scripts, it didn’t detect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Husky&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-staged&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Unit testing: May not detect unused code if tested with unsupported test frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tips for Efficient Usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Review and remove unused Angular’s router paths before running Knip to improve Module detection.&lt;/li&gt;
  &lt;li&gt;Consider alternative test frameworks supported by Knip for broader detection - Since Angular 16,
&lt;a href=&quot;https://blog.angular.io/moving-angular-cli-to-jest-and-web-test-runner-ef85ef69ceca&quot;&gt;Jest has experimental support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Be aware of limitations specific to your technology stack and adjust workflow accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Knip’s Angular support is evolving, so future updates might address some limitations&lt;/li&gt;
  &lt;li&gt;Explore alternative code analysis tools that might complement Knip and address its shortcomings&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Mar 2024 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2024/03/20/strengths-and-limitations-of-knip-for-unused-code-detection-in-angular/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2024/03/20/strengths-and-limitations-of-knip-for-unused-code-detection-in-angular/</guid>
        
        <category>Angular</category>
        
        <category>Knip</category>
        
        <category>Unused Code Detection</category>
        
        <category>Frontend</category>
        
        <category>JavaScript</category>
        
        <category>TypeScript</category>
        
        <category>Tools</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>Teaching Java: Reflections on the Attempt</title>
        <description>&lt;p&gt;I’ve been a programmer for more than 4 years, specifically a Java developer, while I still have a lot to learn, I also believe that I have some to share, especially for newcomers. In Iterative Engineering I’ve already had a chance to tutor interns or junior programmers, which was quite nice, but I thought it would be cool  taking on the challenge of creating an online course. In the past I used to learn a lot from such resources myself, so I thought the same would apply to others. A large library of courses that I have completed myself and those which I purchased, hoping that I would get around one day  (I believe there are people who can understand this situation! 😂) - would serve as a great inspiration..&lt;/p&gt;

&lt;p&gt;However, before I started creating the online course, I had the idea to test myself in a real-life scenario with in-person course participants. I thought it would be a great foundation and experience to help me in preparing the course. So I found a group of people who were interested in learning the basics of programming in Java (it was easier than you think!). Six people decided to dedicate 4 hours a week for the next 3-4 months to embark on this training adventure with me.&lt;/p&gt;

&lt;p&gt;The in-person training has now come to an end, and I would like to share with you the experiences I gained during the course.&lt;/p&gt;

&lt;h1 id=&quot;preparation-of-the-training-material&quot;&gt;Preparation of the training material&lt;/h1&gt;

&lt;p&gt;A great assistant for creating examples, coming up with tasks and for finding information was Chat GPT. It has saved me a great deal of time. Unfortunately, the content it generates is far from  perfect, and sometimes it gets a little wordy. It also  requires knowledge of subjects we ask it about, as it is necessary to verify the answers it gives us. I treated it as an assistant who provides me with the specific content I need instead of searching for it on google or in books, which would have taken me more time.&lt;/p&gt;

&lt;p&gt;I tried to create materials that would be simple to understand. So that each topic is explained step by step in detail and covered in this case with enough tasks and examples. And after reading them, there would be no need for additional questions to understand them.&lt;/p&gt;

&lt;p&gt;Each topic ended with a number of tasks that allowed students to repeat the content of the theoretical part. The tasks would have to be formulated in such a way that they used vocabulary commonly used by programmers. This vocabulary also had to be included in the course content so that one could review it at any time and be able to understand the task.&lt;/p&gt;

&lt;p&gt;I noticed that such a way of creating tasks allowed them to be understood faster, they were completed faster and it helped in assimilating the knowledge contained in the theoretical content.&lt;/p&gt;

&lt;p&gt;The next thing that guided me in creating tasks was to prepare several simple tasks that touched on various issues of the topic, and the last task was a “bigger” one that required the use of all the knowledge acquired in the topic. The task was created in such a way that it also covered previous topics. Which the trainees have already covered.&lt;/p&gt;

&lt;p&gt;The last assumption about the materials and tasks was the 80/20 rule . 80% of the content and time I wanted it to be spent on tasks and 20% on theory. Hence, it was important to prepare the right amount of assignments that were worked out in detail. I think this was the best decision because I saw that the most fun and learning was during solving the tasks rather than discussing the theory.&lt;/p&gt;

&lt;p&gt;As for the theory, I also approached it a bit practically. That is, I tried to explain the whole thing with as many examples as possible. So that participants in the course of reworking the theory could compile the code and see what happens. Also I encouraged the content to experiment by giving simple ideas of what else could be tested. Examples were very important after they could understand the issue in a simple way and in solving tasks. So that the students did not feel lost while solving them&lt;/p&gt;

&lt;h1 id=&quot;starting-the-course-and-first-impressions&quot;&gt;Starting the course and first impressions&lt;/h1&gt;

&lt;p&gt;At first I was stressed. I wondered if I would be able to answer the questions that would come up. A lot of black scenarios were forming in my head, in which the students will have more knowledge than me. Fortunately, after a few classes I realized that as a teacher I don’t need to know everything and the questions I don’t know the answer to will be known by ‘Uncle’ Google or Chat GPT. My task, as a teacher,is to understand the question, do proper research and provide  a good answer along with a clear explanation.&lt;/p&gt;

&lt;p&gt;The initial classes helped me work out my teaching style and how I should present the knowledge and how to adapt the materials for the next classes. I think I made a good decision by not preparing all the materials before the course, only the first couple of chapters. This allowed me to quickly make changes and prepare the next materials already according to the new guidelines.&lt;/p&gt;

&lt;h1 id=&quot;mistakes-i-made&quot;&gt;Mistakes I made&lt;/h1&gt;

&lt;p&gt;The first mistake I made was trying to create a training course that would present all the secrets of java. When I prepared a list of issues related to the basics, I realized that there was too much information and it would take more time than ⅞ of the meetings I had planned.&lt;/p&gt;

&lt;p&gt;The conclusion was simple for me: I had to narrow down the lists of topics I wanted to cover. Therefore, I set myself the goal of imparting enough knowledge that would allow me to create a simple console application. In my case, it was an application for cataloging the books we own. This allowed me to narrow down the range of skills needed to a minimum and make it in the 8 meetings I planned and at the same time to introduce basic programming skills and jointly create the first simple application.&lt;/p&gt;

&lt;p&gt;The second mistake I noticed was the way I communicated with my students.
I was using technical vocabulary related to programming that I hadn’t explained before. Because many of the words/terms that I use in my work have already become natural to me, so I no longer pay attention to them when I use them.&lt;/p&gt;

&lt;p&gt;This mistake helped me improve the content of the materials and the way the course topics were discussed.&lt;/p&gt;

&lt;p&gt;The third mistake of equal importance was too few examples and too much dry theory.
Just as with code, each method should be properly tested. Here each topic should have a sufficient number of examples or additional tasks so that the student can better understand the issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/teaching-java-reflections-on-the-attempt/mistakes.webp&quot; alt=&quot;Mistakes&quot; title=&quot;Mistakes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last and most important mistake I made was the content of the tasks I created for beginning  topics. The task descriptions were not very detailed for people who had never programmed before. e.g:&lt;/p&gt;

&lt;p&gt;From a less detailed task:
Display the sum of two numbers on the screen.&lt;/p&gt;

&lt;p&gt;To a more detailed one, like an action instruction:
Declare two variables x,y which will be natural number values. Initialize them with arbitrary values. Then perform an additional calculation using these two variables and assign the result to a new variable z. Display the value of variable z on the screen.&lt;/p&gt;

&lt;p&gt;While in real life, we often face less defined tasks, at the stage of learning the technology and how to program it is really helpful to give more detailed definitions. Same approach often works for interns and junior programmers who still need to become proficient with technology and only later could also focus on domain and think themselves on solving business problems.&lt;/p&gt;

&lt;p&gt;Thanks to the fact that the task contained technical names it allowed faster and better familiarization. And the more detailed description of what you need to do allowed you to understand the tasks faster. After a few rewrites of the topics and dozens of tasks done, this was no longer required. Tasks had to be well defined but no longer required such detailed instruction.&lt;/p&gt;

&lt;h1 id=&quot;interaction-with-participants-and-building-relationships&quot;&gt;Interaction with participants and building relationships&lt;/h1&gt;

&lt;p&gt;The first and most important point that I focused on as an instructor was creating a friendly environment for each participant. Without such an atmosphere, learning, regardless of the topic, becomes more difficult. In the case of programming, which can often be frustrating for beginners, this is even more important.&lt;/p&gt;

&lt;p&gt;An important aspect was listening to problems with tasks or understanding content and solving problems together. If a participant encountered an obstacle, I asked them to share it with the group. This provided an opportunity to learn from each other. It showed the value of collaboration in the world of technology. Which is an integral part of it.&lt;/p&gt;

&lt;p&gt;Another key aspect was to provide ongoing support and motivation. Programming can be a challenge, and the learning process can be full of ups and downs. I wanted the students to know that they were supported throughout.&lt;/p&gt;

&lt;h1 id=&quot;summary-on-running-the-course&quot;&gt;Summary on running the course&lt;/h1&gt;

&lt;p&gt;The beginning was not easy. It required me to get out of my comfort zone. Putting myself in the position of being a person who creates content and communicates it and not just consumes it. Spending a lot of time preparing materials. I cannot say exactly how much, but I would say roughly 17 to 20 hours .  I managed to create 100 pages of a4.&lt;/p&gt;

&lt;p&gt;Overall it was a great idea to organize a stationary course before preparing an online one.. It allowed me to better understand the learning process and accelerated the creation of effective training materials. The mistakes I made in the beginning became invaluable lessons that helped me improve my teaching methods.&lt;/p&gt;

&lt;p&gt;In the near future will appear below links to materials from the course I have prepared, on java topics of my choice.&lt;/p&gt;

&lt;h1 id=&quot;references--materials&quot;&gt;References &amp;amp; Materials:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Head First Java - Kathy Sierra, Bert Bates, Trisha Gee&lt;/li&gt;
  &lt;li&gt;The Science of Self-Learning - Peter Hollins&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java: A Beginner’s Guide - Herbert Schildt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.javatpoint.com/java-tutorial&quot;&gt;https://www.javatpoint.com/java-tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://beginnersbook.com/java-tutorial-for-beginners-with-examples/&quot;&gt;https://beginnersbook.com/java-tutorial-for-beginners-with-examples/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.guru99.com/java-tutorial.html&quot;&gt;https://www.guru99.com/java-tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/the-java-programmer-roadmap-f9db163ef2c2&quot;&gt;https://medium.com/javarevisited/the-java-programmer-roadmap-f9db163ef2c2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 14 Jan 2024 00:00:00 -0600</pubDate>
        <link>https://blog.iterative.engineering/2024/01/14/teaching-java-reflections-on-the-attempt/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2024/01/14/teaching-java-reflections-on-the-attempt/</guid>
        
        <category>Teaching</category>
        
        <category>Personal experience</category>
        
        <category>Java</category>
        
        
        <category>lifestyle</category>
        
      </item>
    
      <item>
        <title>Battling Ad Fraud - Spoofed Browsers Detection</title>
        <description>&lt;p&gt;$68bn worldwide of total ad spend will fall victim to fraudsters in 2022 alone. So what is AdTech doing to fight off fraud and what kind of technical challenges is it facing?&lt;/p&gt;

&lt;p&gt;Detecting if ad impressions aren’t performed by bots is a massive subject in the industry. However the issue isn’t a new thing, its scale and impact has grown significantly. The problem applies to both big and small networks and is an increasingly growing concern across all of the clients.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://www.juniperresearch.com/researchstore/content-digital-media/digital-advertising-fraud-research-report?utm_campaign=pr1_digitaladvertisingfraud_providers_content_feb22&amp;amp;utm_source=vuelio&amp;amp;utm_medium=pr&quot;&gt;Juniper Research&lt;/a&gt; report, a staggering amount of $68bn has grown from $59bn in 2021, while in 2017 it was ‘only’ $8bn. Other research claims that, as of now, 25%-40% ad campaigns budgets are affected by fraudulent traffic. While the exact numbers are not certain, the costs seems to be massive and growing.&lt;/p&gt;

&lt;h1 id=&quot;so-what-are-the-technical-ways-to-protect-against-it&quot;&gt;So what are the technical ways to protect against it?&lt;/h1&gt;

&lt;p&gt;One of the general approaches is scanning of the traffic and detection of various anomalies within. Suspicious impressions are then filtered out and should not affect the campaign.&lt;/p&gt;

&lt;p&gt;The algorithms are both classic and AI based. They check technical and behavioral aspects in various perspectives in order to classify and score a given case. Typical example of checks are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;detecting mobile devices that don’t have a touchscreen&lt;/li&gt;
  &lt;li&gt;learn the screen resolution of a particular mobile device and cross check it&lt;/li&gt;
  &lt;li&gt;monitor IP address ranges or ISPs&lt;/li&gt;
  &lt;li&gt;verify browser features and if they have not been overridden&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-does-it-look-in-practice&quot;&gt;How does it look in practice?&lt;/h1&gt;

&lt;p&gt;Recently we’ve been working on the latter within a project for our long term client&lt;a href=&quot;https://www.adscore.com&quot;&gt; Adscore Technologies DMCC&lt;/a&gt;. The focus was around detection if certain Javascript (JS) methods have been tampered (modified). Yes, in JS it is entirely possible to overwrite any native function with your own code (yes, just like that).&lt;/p&gt;

&lt;p&gt;So however, it’s also possible to detect such changes, at least in theory, as in practice it’s not that straightforward. Just have a look at recent conversation of our engineers, which has inspired me to write down this blog post!&lt;/p&gt;

&lt;h2 id=&quot;outside-the-box-thinking-is-required&quot;&gt;Outside the box thinking is required!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Adam&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;One way to detect changes is the ‘getString()’ method. Called on a function it returns its source code and in case of native functions the response is “[native code]”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pawel&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Great, so problem solved, isn’t it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Adam&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Well, actually no! Think about what happens when someone modifies the ‘getString()’ so it returns “[native code]” for the function he had modified!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pawel&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Tricky! But we can actually call ‘getString()’ on the modified ‘getString()’ method, this will reveal that this one has been modified, as well!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Adam&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;True but, what if someone modifies ‘Function.prototype.toString’ and ensures that if it’s called on itself it returns “[native code]”?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pawel&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I see, but we still can rely on the fact that all customly defined functions have a property named ‘prototype’, so we can check if ‘Function.prototype.toString’ does exist. If it does then we would know it was modified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Adam&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;That is indeed correct, but what if the implementation was done through the Proxy (granting transparent virtualization)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pawel&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Well…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;looking-for-more&quot;&gt;Looking for more?&lt;/h1&gt;

&lt;p&gt;If you found that subject interesting you may want to look at &lt;a href=&quot;https://adtechmadness.wordpress.com/2019/03/23/javascript-tampering-detection-and-stealth/&quot;&gt;this article&lt;/a&gt;. And if you face fraudulent traffic which affects your campaigns &lt;a href=&quot;https://calendly.com/krzysztof-gasior/adtech-discovery-call-15m&quot;&gt;let’s talk&lt;/a&gt; as we should be able to help out!&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2022 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2022/08/22/battling-ad-fraud-spoofed-browsers-detection/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2022/08/22/battling-ad-fraud-spoofed-browsers-detection/</guid>
        
        <category>JavaScript</category>
        
        <category>AdTech</category>
        
        <category>Frontend</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>Contract testing with Spring</title>
        <description>&lt;p&gt;Efficient distributed software testing, in particular microservices, is a very challenging subject, yet essential to success. Therefore, as programmers, we often confront a task: how to effectively simulate the behavior of an external service? As we want to quickly receive feedback when changes on either end are causing issues and how they propagate. In this article I present a standardized approach to the problem, a step-by-step guide on how to create effective test infrastructure for your services using Spring Cloud Contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you would like to preview the code used in this article, just clone &lt;a href=&quot;https://github.com/IterativeEngineering/blog.consumer-driven-contracts-with-spring&quot;&gt;this repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;contract-testing&quot;&gt;Contract Testing&lt;/h1&gt;

&lt;p&gt;So before we jump into code, let’s start with a few definitions. I know, I know, who needs a theory, ey? But I just want to ensure that it’s fully clear what the subject is.&lt;/p&gt;

&lt;p&gt;The Contract is a formal, precise and verifiable interface specification for software components. Similarly, like in business it defines conditions and obligations for participating sides, which typically are available interactions, message structures and communication protocols. The participating sides are in this case software pieces, often referred to as Producer and Consumer.&lt;/p&gt;

&lt;p&gt;As a Producer we can view the Contract as an expectation on what data or actions shall we provide and how. On the other side, Consumers (services that uses the data prepared by Producer) use the Contract to understand how to interact with it and what responses to expect.&lt;/p&gt;

&lt;p&gt;Contract Testing is an approach where Contracts become part of the source code and are used to test it. The goal is to ensure compatibility via fast detection of breaches. As those may occur on either side. Typically the Contract is published as a shareable library, so both Producer and Consumer can rely on it and comply with the agreed structure.&lt;/p&gt;

&lt;p&gt;Contract Tests are not aimed at business features testing or simulate full behavior, they are supposed to only verify the Contract. Thanks to that they allow us to quickly verify the service using stubs without the need to perform time-consuming end-to-end tests, which can be a huge (timewise) win in case of bigger applications.&lt;/p&gt;

&lt;h1 id=&quot;spring-cloud-contract&quot;&gt;Spring Cloud Contract&lt;/h1&gt;

&lt;p&gt;Ok, so let’s also get a little background about the Spring Cloud Contract project and outline how we will use it.&lt;/p&gt;

&lt;p&gt;As we can read from the &lt;a href=&quot;https://spring.io/projects/spring-cloud-contract&quot;&gt;documentation&lt;/a&gt;, Spring Cloud Contract is an umbrella project holding solutions that help users in successfully implementing the Consumer Driven Contract. In the Spring Cloud Contract nomenclature, we call a pair of such services as the Producer who supplies the service and the Consumer who uses it.&lt;/p&gt;

&lt;p&gt;For the purposes of this article, we will create these services and define a Contract that specifies how they communicate. On the basis of the mentioned Contract, after each change in the application tests and stubs will be regenerated and will guarantee quick feedback if the Contract between the services become broken. When testing microservices, this is a much better approach than creating mocks manually (e.g. using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MockRestServiceServer&lt;/code&gt;) because it provides stubs created directly by the service we are calling. This means that they have also been tested on the producer side. What’s more, in Spring Cloud Contract, the creation and release of stubs by the Producer is enforced after every change in service. It means that our stubs are always up to date and we can trust them.&lt;/p&gt;

&lt;h2 id=&quot;producer&quot;&gt;Producer&lt;/h2&gt;

&lt;p&gt;Now it’s time for practice! Let’s start with the Producer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/contract-testing-with-spring/producer-side.webp&quot; alt=&quot;Producer side&quot; title=&quot;Producer side&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, we will start by creating a simple Spring Boot web application and adding the following dependency:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-contract-verifier&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the sake of simplicity, the Producer will be a service with just one endpoint that sums up 2 provided numbers. So let’s create a controller:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MathController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have a working endpoint, let’s create a Contract with a self-descriptive name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldReturnSumOfGivenNumbers.groovy&lt;/code&gt; (if you prefer the TDD approach, you can first create a contract and generate stubs, and then move on to implementation). To define a contract we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contract.make&lt;/code&gt; and then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Define the consumer’s request details
    &lt;ul&gt;
      &lt;li&gt;Type of method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Target endpoint &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sum&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Query parameters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argA&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argB&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Define the producer’s expected response with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status 200&lt;/code&gt; and body &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;contracts&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cloud.contract.spec.Contract&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Should return sum of argA and argB&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/sum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;queryParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;argA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;argB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you prefer a more declarative style, then it’s also possible to define contracts using yaml files. The contract’s default path is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/test/resources/contracts&lt;/code&gt; but it’s possible to overwrite it by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contractsDslDir&lt;/code&gt; property in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Based on the above Contract, we can automatically generate stubs and verification tests during the application building process. For that we use the &lt;em&gt;spring-cloud-contract-maven-plugin&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-contract-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;baseClassForTests&amp;gt;&lt;/span&gt;
      engineering.iterative.producer.setup.ProducerTestSetup
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/baseClassForTests&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;baseClassForTests&amp;gt;&lt;/code&gt; we provided the path to the configuration class of our tests, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProducerTestSetup&lt;/code&gt;. If you prefer you can also use gradle with &lt;em&gt;spring-cloud-contract-gradle-plugin&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifier_version}&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ProducerTestSetup looks as follows, note that each generated test will inherit from this class.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WebEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMessageVerifier&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProducerTestSetup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MathController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;StandaloneMockMvcBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standaloneMockMvcBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;MockMvcBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standaloneSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mathController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RestAssuredMockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standaloneSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standaloneMockMvcBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MockMvcBuilders.standaloneSetup()&lt;/code&gt; allows the registration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MathController&lt;/code&gt; without the need to use the full web application context. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestAssuredMockMvc&lt;/code&gt; is a REST-assured API built on top of Spring’s MockMvc.&lt;/p&gt;

&lt;p&gt;When we run the build by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt;, the plugin automatically generates a test class in &lt;em&gt;/target/generated-test-sources/contracts/&lt;/em&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContractVerifierTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProducerTestSetup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_shouldReturnSumOfGivenNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// given:&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MockMvcRequestSpecification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// when:&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ResponseOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// then:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// and:&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DocumentContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsedJson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it – the Producer setup is done and ready to be used by Consumers.&lt;/p&gt;

&lt;h2 id=&quot;consumer&quot;&gt;Consumer&lt;/h2&gt;

&lt;p&gt;Since we already have a Producer implementation and defined contract, let’s move on to creating the Consumer service. Our new service will be responsible for calculating the average value of 2 given numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/contract-testing-with-spring/consumer-side.webp&quot; alt=&quot;Consumer side&quot; title=&quot;Consumer side&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To do this, we first need to use a producer’s endpoint to provide us the sum of the mentioned numbers, and then we can return their average value.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/average&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;averageOfTwoDigits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;argB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8090/sum?argA=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;argB=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also need to add the &lt;em&gt;spring-cloud-contract-wiremock&lt;/em&gt; and &lt;em&gt;spring-cloud-contract-stub-runner&lt;/em&gt; dependencies:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-contract-stub-runner&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-contract-wiremock&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last step is to create an integration test for the Consumer. This time, we will not mock the behavior of remote service in the test, but we will use generated by the producer stubs. For this purpose, we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AutoconfigureStubRunner&lt;/code&gt; annotation, in which we indicate the artifactId of the jar file that contains our stubs. For this demo project I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOCAL&lt;/code&gt; stubs mode, but typically &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REMOTE&lt;/code&gt; is the state we want to reach. You can read more about stubs modes &lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/2.0.x/multi/multi__spring_cloud_contract_stub_runner.html#_stub_downloading&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WebEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureJsonTesters&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureStubRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stubsMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StubRunnerProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StubsMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;engineering.iterative:producer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculationControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_WhenPassEvenNumberInQueryParam_ThenReturnEven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;MockMvcRequestBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/average?argA=2&amp;amp;argB=3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CalculationControllerTest&lt;/code&gt; we used several Spring annotations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RunWith&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt;. If you don’t know them yet, just read &lt;a href=&quot;https://www.baeldung.com/spring-boot-testing&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After running this test, we can see that it uses the generated stubs:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Admin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;received&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappings&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12003&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;411&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1fbe1b09-2485-4add-a25e-49471f45e665&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/sum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;queryParameters&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;argA&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;argB&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;transformers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;response-template&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1fbe1b09-2485-4add-a25e-49471f45e665&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stubrunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StubRunnerExecutor&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stubs&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RunningStubs&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;namesAndPorts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;engineering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SNAPSHOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stubs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12003&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, when we change something on the Producer’s side, we also have to change the Contract. After it is pushed to the common repository (in our example – local repository), the Consumer’s tests will stop passing due to the fact that it does not meet the new conditions of the contract.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Spring Cloud Contract allows to easily implement a contract driven approach, which provides autocontrol over API changes. It is especially useful when dealing with microservices architecture, benefiting with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quick feedback, on both ends, if breaking changes are applied to a Contract&lt;/li&gt;
  &lt;li&gt;No need to mock the behavior of remote services in consumer’s tests&lt;/li&gt;
  &lt;li&gt;Formalizing the way and place that Contracts are defined. All you need to do is to define a contract and release mocks so that other teams can start working on their services before we even start implementing the producer’s logic.&lt;/li&gt;
  &lt;li&gt;In setups where given service is used by many other services Stubs are always up to date (new stubs release is enforced after every change in Producer side)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you found this article interesting check out official &lt;a href=&quot;https://spring.io/projects/spring-cloud-contract&quot;&gt;documentation&lt;/a&gt;, take a look at &lt;a href=&quot;https://www.youtube.com/watch?v=IiK9A9nQ6NU&quot;&gt;videos&lt;/a&gt; by Spring Cloud Contract authors or &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;talk to us&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-cloud-contract&quot;&gt;https://www.baeldung.com/spring-cloud-contract&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud-contract&quot;&gt;https://spring.io/projects/spring-cloud-contract&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IiK9A9nQ6NU&quot;&gt;https://www.youtube.com/watch?v=IiK9A9nQ6NU&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.schibsted.pl/blog/contract-testing/&quot;&gt;https://www.schibsted.pl/blog/contract-testing/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/reference/html/getting-started.html&quot;&gt;https://cloud.spring.io/spring-cloud-contract/reference/html/getting-started.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 Aug 2022 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2022/08/08/contract-testing-with-spring/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2022/08/08/contract-testing-with-spring/</guid>
        
        <category>Java</category>
        
        <category>Spring Framework</category>
        
        <category>Contract Testing</category>
        
        <category>Testing</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>Secure Spring Boot Application with Microsoft Azure AD</title>
        <description>&lt;p&gt;Application security is an important part of cohesive digital product security and one for which typically software developers are responsible for. Handling it properly and according to industry standards is crucial, especially nowadays where literally anything that gets published is immediately targeted and scanned for vulnerabilities.&lt;/p&gt;

&lt;p&gt;One of the most common challenges in that aspect is authentication &amp;amp; authorization of the users. While there are many ways to do it, its really worth considering an external Identity Provider approach either via OAuth2 or SAML. The reason is that it typically gives great and proven security without the need to code and maintain the whole process, which is not trival!&lt;/p&gt;

&lt;p&gt;This article presents an in detail walkthrough on how to secure a Java Spring Boot Application using Microsoft Azure AD, which is a great and widely adopted example of a reliable Identity Provider.&lt;/p&gt;

&lt;h4 id=&quot;who-may-find-this-article-helpful&quot;&gt;Who may find this article helpful&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Java developers experienced with Spring looking for ‘how to’ on pluging in Azure AD as Identity Provider into their apps.&lt;/li&gt;
  &lt;li&gt;Software Developers wishing to increase their knowledge around applications security and authentication schemes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you belong to first group you may skip the first part and jump directly to the “Register application in Azure Tenant” chapter.&lt;/p&gt;

&lt;h4 id=&quot;what-will-you-learn&quot;&gt;What will you learn&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;What are the advantages and disadvantages of using an external Identity Provider&lt;/li&gt;
  &lt;li&gt;How to configure and register your application in the Azure Tenant which is required to secure it by Azure AD&lt;/li&gt;
  &lt;li&gt;How to configure Spring Boot Application to secure it via Microsoft Identity Provider&lt;/li&gt;
  &lt;li&gt;How to configure Nginx / Apache as a reverse proxy when secured as such&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-project&quot;&gt;Example project&lt;/h4&gt;

&lt;p&gt;One to be found on GitHub: &lt;a href=&quot;https://github.com/IterativeEngineering/blog.secure-spring-boot-application-with-microsoft-azure-ad&quot;&gt;Spring Boot Secured App&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Azure account with a subscription (e.g Pay as you go)&lt;/li&gt;
  &lt;li&gt;Java 11 or higher (or a docker container with such)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;self-implemented-authentication--authorization&quot;&gt;Self-implemented Authentication &amp;amp; Authorization&lt;/h1&gt;

&lt;p&gt;Imagine that in 2010 you have to prepare an application for e.g company managers. With different access levels. What would be your approach to achieve that? Most probably you would go with something similar to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a table of users + passwords and roles in the application&lt;/li&gt;
  &lt;li&gt;Prepare admin panel that allows to manage users and their privileges&lt;/li&gt;
  &lt;li&gt;Manage sessions (either as cookies or tokens) on the client web-app side and store them on the application server, e.g in memory or in DB&lt;/li&gt;
  &lt;li&gt;Implement features such as: Password restore&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A self baked authentication &amp;amp; authorization system with local user information storage. Such setup, even today, is a common way to craft a prototype or MVP and it has advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;low complexity - no 3rd party libraries, no external services engaged&lt;/li&gt;
  &lt;li&gt;data control - all users data are available and may be used the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, it has also major disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vulnerability - Important user data are stored within the application. So they have to be well secured&lt;/li&gt;
  &lt;li&gt;maintenance problems - Roles/groups have to be managed in the app, not in a central point&lt;/li&gt;
  &lt;li&gt;limited extendability - Each feature such as 2FA, Single Sign-On have to be implemented, while implementing security mechanisms is costly and time consuming&lt;/li&gt;
  &lt;li&gt;lack of 3rd party systems integrations - For instance logging via Facebook or Google have to be implemented within the application. While services like Azure AD provide easy-to-use integrations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the long term maintenance efforts could be significant, while not giving any benefits. So let’s look at alternatives.&lt;/p&gt;

&lt;h2 id=&quot;identity-providers-come-on-stage&quot;&gt;Identity providers come on stage&lt;/h2&gt;

&lt;p&gt;In 2007 OAuth 1.0 protocol was released and in 2012 its new version: Oauth 2.0 was released. This started a popularization process of external identity providers - systems that keep users data and provide these data to business applications with user acceptance.&lt;/p&gt;

&lt;p&gt;OAuth 2.0 is widely supported by Microsoft, Google, Amazon etc. The solution I present in this article, while aimed at Microsoft Azure, could be implemented with other identity providers with minor tweaks.&lt;/p&gt;

&lt;h1 id=&quot;how-to-secure-spring-boot-with-azure-ad&quot;&gt;How to secure Spring Boot with Azure AD&lt;/h1&gt;

&lt;p&gt;Let’s go step by step through the configurations that have to be applied in the Microsoft Azure Portal, to secure the application using the Azure Active Directory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register application in Microsoft Azure Tenant&lt;/li&gt;
  &lt;li&gt;Create &amp;amp; Configure Java (Spring Boot) Application&lt;/li&gt;
  &lt;li&gt;Configure reverse proxy&lt;/li&gt;
  &lt;li&gt;Authenticate to the app (Test the setup)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;register-application-in-azure-tenant&quot;&gt;Register application in Azure Tenant&lt;/h2&gt;

&lt;p&gt;Here are steps that are presented below on screenshots:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new Tenant&lt;/li&gt;
  &lt;li&gt;Register a new application &amp;amp; set its allowed ‘redirect-uri’&lt;/li&gt;
  &lt;li&gt;Generate application secret&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setup-a-new-tenant&quot;&gt;Setup a new Tenant&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Log in to portal.azure.com and search for Azure Active Directory service:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/9.webp&quot; alt=&quot;Search for Azure Active Directory&quot; title=&quot;Search for Azure Active Directory&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select manage tenants:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/15.webp&quot; alt=&quot;Select manage tenants&quot; title=&quot;Select manage tenants&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select basic tenant:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/14.webp&quot; alt=&quot;Select basic tenant&quot; title=&quot;Select basic tenant&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finish the configuration and create it:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/12.webp&quot; alt=&quot;Finish the configuration and create it&quot; title=&quot;Finish the configuration and create it&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once ready copy the tenant ID, as it will be neccessary further:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/11.webp&quot; alt=&quot;Once ready copy the tenant ID&quot; title=&quot;Once ready copy the tenant ID&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;register-a-new-application--set-its-allowed-redirect-uri&quot;&gt;Register a new application &amp;amp; set its allowed ‘redirect-uri’&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select “App registrations” and “Register an application”&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/3.webp&quot; alt=&quot;Register a new application via App registration&quot; title=&quot;Register a new application via App registration&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define app name and set redirect URI:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/2.webp&quot; alt=&quot;Define app name and redirect URI&quot; title=&quot;Define app name and redirect URI&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Users will see this name e.g on the “Grant permissions” screen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Supported accounts types:&lt;/strong&gt; By choosing option 1 only you and users from your tenant will be able to log in to the application. As you see, you can allow logging in to your application even for users who are not part of your organisation (option 2,3,4). Choose these options wisely, and only if your application does not expose any vulnerable data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Redirect URI:&lt;/strong&gt; In our example it’s not optional. It’s the URL to which the user is redirected after a successful authentication on the Microsoft login page. If you deploy your application not on localhost but on some server, change localhost:8080 to the appropriate domain name.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-a-secret&quot;&gt;Create a Secret&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Generate a new client secret
&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/10.webp&quot; alt=&quot;Add certificate or secret&quot; title=&quot;Add certificate or secret&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/4.webp&quot; alt=&quot;Create new client secret&quot; title=&quot;Create new client secret&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Note: All secrets have to have an expiration date and they can’t be renewed, so if a secret expires, you can generate a new secret and update it in your application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy and save the Secret value (it is visible only just after secret creation)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/16.webp&quot; alt=&quot;Copy and save generated Secret&quot; title=&quot;Copy and save generated Secret&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Never reveal the Secret to anyone nor publish it to public repositories!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great! At this point the setup on the Azure side is now complete, let’s move on to the application.&lt;/p&gt;

&lt;h2 id=&quot;configure-spring-boot-application&quot;&gt;Configure Spring-Boot application&lt;/h2&gt;

&lt;p&gt;Key things that have to be created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency to the azure spring-boot library that does the ‘magic’ and simplifies integration between SpringBoot app and our Azure Tenant&lt;/li&gt;
  &lt;li&gt;Properties that allow the app to connect to the Azure Tenant&lt;/li&gt;
  &lt;li&gt;Rest controller that will be used for tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example build.gradle file, but a similar setup could be done in maven pom.xml.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;build.gradle&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.5.0&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'io.spring.dependency-management'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.0.6.RELEASE'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pl.iterative'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.0.0-SNAPSHOT'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gradlePluginPortal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Spring boot&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-oauth2-client'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Azure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.azure.spring:azure-spring-boot-starter-active-directory:3.5.0'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;application.properties&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;server.port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;azure.activedirectory.tenant-id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;e76d7581-eabe-4e6b-a676-55e28d9325ee&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;azure.activedirectory.client-id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4b37344a-6dda-4e10-9f02-359477227f25&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;azure.activedirectory.client-secret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SECRET_VALUE_HERE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Application.java&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pl.iterative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;AuthController.java&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pl.iterative.api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The default setup restricts access to all application endpoints. If you wish to customize following article describes how to implement custom security configuration:
&lt;a href=&quot;https://www.baeldung.com/java-config-spring-security#Security&quot;&gt;https://www.baeldung.com/java-config-spring-security#Security&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the sake of this tutorial we will stick to defaults. Once the app is prepared as above config we can run it and access the resource: &lt;a href=&quot;http://localhost:8080/api/v1/login&quot;&gt;http://localhost:8080/api/login&lt;/a&gt; via a web browser.&lt;/p&gt;

&lt;p&gt;On the first login attempt, the user is asked to consent to grant the permissions that the application requests. Always grant this consent carefully, especially to applications you don’t develop, and check precisely which exact permissions you’re granting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/13.webp&quot; alt=&quot;Microsoft Azure permission request for identity data&quot; title=&quot;Microsoft Azure permission request for identity data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A successful log-in process is finished, when user accesses the requested resource:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/17.webp&quot; alt=&quot;URL if login is successfuly&quot; title=&quot;URL if login is successfuly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What actually happens during the authorization process is described further in the article.&lt;/p&gt;

&lt;h2 id=&quot;configure-nginx--apache-reverse-proxy&quot;&gt;Configure Nginx / Apache reverse proxy&lt;/h2&gt;

&lt;p&gt;So while we got the Spring App and Azure AD to work together it’s common scenario to put app behind a reverse proxy like Nginx or Apache.&lt;/p&gt;

&lt;p&gt;However such case implies requirement for additional set up, as we need to properly handle headers and redirects on proxy side.&lt;/p&gt;

&lt;h3 id=&quot;app-config&quot;&gt;App config&lt;/h3&gt;

&lt;p&gt;Add following entries to the application.properties, as first we need to let know app that its behind the proxy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;application.properties&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;server.forward-headers-strategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;FRAMEWORK&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;server.tomcat.redirect-context-root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;If using Nginx as a proxy, we nned to set proxy_set_header directives and a proxy rule for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/oauth2&lt;/code&gt; endpoint, so roughly like following, assuming the app is accessible on localhost under port 8080:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;     &lt;span class=&quot;s&quot;&gt;X-Forwarded-Proto&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/oauth2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080/oauth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/login/oauth2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080/login/oauth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;apachehttpd&quot;&gt;Apache/Httpd&lt;/h3&gt;

&lt;p&gt;In case of Apache2/httpd similarlly, but just using a bit different directives, again assuming app availability on port 8080:&lt;/p&gt;

&lt;div class=&quot;language-apache highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RequestHeader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;set&lt;/span&gt; X-Forwarded-Proto &quot;https&quot;
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/oauth2/(.*) http://localhost:8080/oauth2/$1 [P]
&lt;span class=&quot;nc&quot;&gt;ProxyPassReverse&lt;/span&gt;  /oauth2 [http://localhost:8080/oauth2/](http://localhost:8080/oauth2/)
&lt;span class=&quot;nc&quot;&gt;RewriteRule&lt;/span&gt; ^/login/oauth2/(.*) http://localhost:8080/login/oauth2/$1 [P]
&lt;span class=&quot;nc&quot;&gt;ProxyPassReverse&lt;/span&gt;  /login/oauth2 http://localhost:8080/login/oauth2/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These custom rewrite rules are required because these endpoints are default oauth2 endpoints to which user is redirected before and after a login attempt.&lt;/p&gt;

&lt;h2 id=&quot;how-the-authorization-process-works&quot;&gt;How the authorization process works&lt;/h2&gt;

&lt;p&gt;Let’s see the tab in your browser to check how the whole process works.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User accessed &lt;a href=&quot;http://localhost:8080/api/v1/login&quot;&gt;http://localhost:8080/api/v1/login&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because he was not logged-in (no appropriate cookie was sent as a request header) user is immediately redirected to authentication endpoint of your app &lt;a href=&quot;http://localhost:8080/oauth2/authorization/azure&quot;&gt;http://localhost:8080/oauth2/authorization/azure&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/5.webp&quot; alt=&quot;Azure login form, redirected from our app endpoint&quot; title=&quot;Azure login form, redirected from our app endpoint&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This endpoint redirects user further, to login.microsoft page, along with information about which app did the redirect (this allows MS to sent back user to your app after he successfully authenticate):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/6.webp&quot; alt=&quot;Pass of a redirect url&quot; title=&quot;Pass of a redirect url&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the user passes the appropriate email and password, it’s redirected back to the application, to endpoint http://localhost:8080/login/oauth2/code/?code=0.AV… So to the redirect-uri that we’ve set in while registering the application in Azure. &lt;strong&gt;The code parameter is quite important here.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The application sends the code and client_secret in a background (via so-called backchannel - a non-frontend HTTPS call, so the user of your app does not even know about this request) to Microsoft Azure to exchange it into a JWT token that contains some user data like email address. This happens directly after the user is redirected to the redirect URL, and it’s done by the microsoft library. Which data is sent by MS Azure in the JWT token as a response, depends on the permissions that application is granted.&lt;/p&gt;

    &lt;p&gt;Deep dive into application permissions are out of the scope of this article.
You can check which permissions your app has by going to the azure console:
“App registrations” -&amp;gt; {your_app_name} -&amp;gt; “API permissions”.&lt;/p&gt;

    &lt;p&gt;The JWT token can be used to fetch more data via Microsoft Graph API (but only data to which the user gave the permission). This for example can be used to get user groups/roles in order to authorize parts of the application only for administrators or other privileged users.&lt;/p&gt;

    &lt;p&gt;The redirect from Azure contains a response header “Set-Cookie” which indicates session initialization by the application. JSESSIONID is the id of the session. The “path=/” means that the cookie is set to all resources of the app, so the browser will append the JSESSIONID cookie to all requests under this origin (domain).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/8.webp&quot; alt=&quot;Redirect user back to app, verify token and initalize session&quot; title=&quot;Redirect user back to app, verify token and initalize session&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, after all of these jumps the user is allowed to access the endpoint he requested. User accessed the page because the session cookie has been sent via request header, and based on that JSESSIONID cookie, the application authorized user access to the requested resource:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/secure-spring-boot-application-with-microsoft-azure-ad/7.webp&quot; alt=&quot;Authentication process finished&quot; title=&quot;Authentication process finished&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You’ve made it till the end and now your app is secured with Azure OAuth, great work!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Securing an application with an Identity Provider can simplify the application code and shift responsibility for securing users’ data from your application to the provider. Doing it with Azure AD is one of the multiple options, but all modern Identity Providers supports OAuth2 protocol that standardizes the Authorization process.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Jan 2022 00:00:00 -0600</pubDate>
        <link>https://blog.iterative.engineering/2022/01/10/secure-spring-boot-application-with-microsoft-azure-ad/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2022/01/10/secure-spring-boot-application-with-microsoft-azure-ad/</guid>
        
        <category>Java</category>
        
        <category>Spring Framework</category>
        
        <category>Azure</category>
        
        <category>Azure AD</category>
        
        <category>OAuth</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>How to keep the team integrated despite physical distance</title>
        <description>&lt;p&gt;Last year was a challenge for all of us. The pandemic has shaken the whole world and reshaped it in many ways. We are all aware of the negative imprint it left on people’s everyday lives. Among other things, it heavily reduced the social aspects of daily work impacting teamwork and collaboration. But as every coin has two sides, even the hard times may offer opportunities for growth.&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;In our case the lockdown and work from home policy had almost no impact on our work routines, because over the years of providing remote services for our clients we were well equipped with the right tools. The main downside of social distancing was the reduced flow of information. If you are in the office, sitting next to each other, it’s so much easier to cooperate! It was not a problem to switch to the online communication channels within the team, as everyone was already using them daily to talk directly to our clients. To ensure the proper flow of information, we introduced a few sync-up meetings focused on specific topics, along with one monthly company-wide where everyone is encouraged to share their thoughts. That worked surprisingly well!&lt;/p&gt;

&lt;p&gt;But it’s not just about work. An ability to stay at home with my favourite cup of coffee and avoid terrible traffic, that recently jammed my district due to construction works, was awesome. But I quickly realised that I was missing something important, that I wasn’t fully aware of before it suddenly disappeared. I enjoyed my work not only because of the technical and business challenges, but also because I could spend time with great people. These seemingly unimportant chats in the kitchen, jokes and casual conversations are the actual glue that keeps the team together.&lt;/p&gt;

&lt;p&gt;That social aspect may start to fade away when everyone is focused just on their work, but it’s an essential part of an enjoyable workplace. When people know and like each other, it’s much easier to work together on tasks requiring cooperation, provide onboarding and mentoring for the newcomers or just delivering – as people help each other and feel responsible for the end result.&lt;/p&gt;

&lt;h2 id=&quot;opportunities&quot;&gt;Opportunities&lt;/h2&gt;

&lt;p&gt;The fully remote working environment has also encouraged us to look beyond our neighbourhood and open for fully remote workers from other parts of the country. We have now successfully established cooperation with developers from southern, central and northern Poland, which proved to be very productive.&lt;/p&gt;

&lt;p&gt;As the pandemic restrictions were relaxed, we slowly started to transition to a hybrid way of working, where the office is open for everyone, but they can decide to work remotely if that’s more convenient. As we now had some fully-remote teammates, a new challenge arose. How can we integrate the team members, when we are so far away from each other?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/iterative-kitchen.webp&quot; alt=&quot;Kitchen party&quot; title=&quot;Kitchen party&quot; /&gt;
&lt;em&gt;So good to have a kitchen in the office&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So far, we were successful in building a company not only on technical skills of individuals, but also on relationships and teamwork. We were celebrating birthdays (where individually crafted memes became tradition), meeting regularly at pizza parties and spending casual time together. But for the new team members from northern Poland it was much more difficult to travel 600 km just to meet us in the office.&lt;/p&gt;

&lt;h2 id=&quot;get-together&quot;&gt;Get together!&lt;/h2&gt;

&lt;p&gt;We decided to pick up a central location and provide a convenient opportunity for everyone to meet in person. After a short voting, the team decided for Warsaw. We organised a weekend trip to meet everyone in person and spend some time together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/remote-work.webp&quot; alt=&quot;Who said that remote work should be limited to home-office?&quot; title=&quot;Who said that remote work should be limited to home-office?&quot; /&gt;
&lt;em&gt;Who said that remote work should be limited to home-office?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We are located in different parts of Poland, but the majority lives in the Silesia region. That group took a direct high-speed train to Warsaw, where the integration started. When the rest of the folks arrived, we began the evening by visiting a fantastic Croatian restaurant. After that, there was a pub crawl, a couple of shots and a visit to a club. That was a great come back to normal life after months of social distancing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/in-restaurant.webp&quot; alt=&quot;The Iterative team in a Croatian restaurant&quot; title=&quot;The Iterative team in a Croatian restaurant&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/bar.webp&quot; alt=&quot;Pub crawling&quot; title=&quot;Pub crawling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next day started with a delicious breakfast in the pancake restaurant and then there was time for team building. We decided to visit an escape room and divided into two sub-teams that competed for the fastest time to solve the mysteries of a WWII bunker and riddles left by a couple of artists. That was fun!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/escape-room.webp&quot; alt=&quot;Escape Room&quot; title=&quot;Escape Room&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/iterative-engineering-team.webp&quot; alt=&quot;Iterative Engineering Team&quot; title=&quot;Iterative Engineering Team&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Integration events like this are seemingly just unimportant entertainment. But they provide a hidden, immeasurable value. Interaction between people is essential for having a productive and well-organized team. As social animals (yes, engineers also count!), we cannot rely solely on verbal online communication. Even though we still keep working remotely, meeting a person in real life and spending even a short time together is the fastest way to encourage further cooperation. It is important to put a face to a voice, and H264-compressed video of a face on a zoom call won’t let you build the same level of relationship as a real meeting!&lt;/p&gt;

&lt;p&gt;We’re definitely going to repeat this regularly!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-keep-the-team-integrated/wasted.webp&quot; alt=&quot;Coming back home&quot; title=&quot;Coming back home&quot; /&gt;
&lt;em&gt;That was actually quite a challenging day 😉!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Dec 2021 00:00:00 -0600</pubDate>
        <link>https://blog.iterative.engineering/2021/12/20/how-to-keep-the-team-integrated/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/12/20/how-to-keep-the-team-integrated/</guid>
        
        <category>Remote Work</category>
        
        <category>Team Integration</category>
        
        <category>Distributed Teams</category>
        
        
        <category>business</category>
        
      </item>
    
      <item>
        <title>Key 8 Takeaways from Stack Overflow 2021 Developers Survey</title>
        <description>&lt;p&gt;Recently over 80k developers gave their voice on how they earn, learn, level up and which tools they use the most willingly or which they hate. Following we share our CEO and CTO subjective viewpoint on some of the most important insights from Stack Overflow Developer Survey 2021.&lt;/p&gt;

&lt;p&gt;The IT industry is a very dynamic landscape. As any competitive employer and digital product development company we try to stay up to date with rapid changes and newest technology trends. We analyse the market, track research reports and surveys, all of that to try to stay at the bleeding edge of technology.&lt;/p&gt;

&lt;h3 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript is the most widely used technology, however position of Python, Java and C# is still strong.&lt;/li&gt;
  &lt;li&gt;Scripting (JavaScript, Python, TypeScript) and modern compiled languages (GO and Rust) are trending and getting more and more interest from the community.&lt;/li&gt;
  &lt;li&gt;Proficiency with Docker &amp;amp; containers is a must have for modern developers.&lt;/li&gt;
  &lt;li&gt;Visual Studio Code as an IDE, and React.js as a web framework are dominating on the market in their category, both loved and widely used.&lt;/li&gt;
  &lt;li&gt;Open source document databases (Mongo, ElasticSearch) and SQL databases (PostgreSQL, MySql) are storage technologies which developers want to use the most.&lt;/li&gt;
  &lt;li&gt;Online resources are the primary source for knowledge and information.&lt;/li&gt;
  &lt;li&gt;Most of the developers are graduates but they learn how to code elsewhere.&lt;/li&gt;
  &lt;li&gt;Top paid jobs, ranging at $100k+ per year, are related to functional programming (Clojure, F#). Except for the execs and management, devops and data engineering are positions with the highest salaries with an average of $70k per year.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;current-tech-demand-and-workloads&quot;&gt;Current tech demand and workloads&lt;/h1&gt;

&lt;p&gt;Let’s start with a look at the most utilised technologies across the sector and dive into details of what is used to turn the cogs&lt;/p&gt;

&lt;h2 id=&quot;most-popular-programming-languages&quot;&gt;Most popular programming languages&lt;/h2&gt;

&lt;p&gt;There can be only one king and it is JavaScript. The domination is impressive and we believe it will remain as such for a longer time. Its universality is probably a key factor here. It is applied for all ‘sides’ of software development: server side programming (backend), web (frontend) and mobile (hybrid). And to be fair it’s pretty damn good for all of those.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-used-programming-language.webp&quot; alt=&quot;Most used programming language - there can only be one king and it is JavaScript&quot; title=&quot;Most used programming language - there can be only one king and it is JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The trend of steady and constant growth of scripting languages such as JavaScript, Python or TypeScript still in place. As their performance limitations are less and less relevant, they can be applied to more and more cases. While working with such languages is in a lot of cases more efficient and quick compared to native or managed technologies.&lt;/p&gt;

&lt;p&gt;However Java in Top 5 and C# in the Top 10 is definitely a signal that managed languages are still strong. In fact they are evolving faster than ever before. Very recently we’ve welcomed the official release of Java 17 (!) and it just took 6 months to get there after the release of Java 16, while in the past new releases took years (i.e. jump from java 8 to Java 9 took 5 years). It really became worth following the official road map: &lt;a href=&quot;https://www.java.com/releases/&quot;&gt;https://www.java.com/releases/&lt;/a&gt; as changes are happening rapidly and often are pretty useful (i.e. Record).&lt;/p&gt;

&lt;p&gt;It feels that we at Iterative Engineering are pretty well placed. Our main focus is Java for backend and JavaScript/TypeScript for frontend and mobile. We also often deal with most of the TOP 10, with the only exception of native technologies - C or C++, which we’ve never found that attractive. We believe that such focus gives a great current and future outlook.&lt;/p&gt;

&lt;h2 id=&quot;integrated-development-environment-ide-means&quot;&gt;Integrated Development Environment (IDE means)&lt;/h2&gt;

&lt;p&gt;Kudos to Microsoft for Visual Studio Code. Efficient yet lightweight tool, with on-demand support for a variety of technologies. It is truly a pleasure to use it and clearly the market voice confirms that. A well deserved 1st place with more than double the score of the closest competitor.&lt;/p&gt;

&lt;p&gt;Top 5 consist of 3 lightweight and 2 fully featured IDEs. The trend is for sure related to increasing popularity of scripting languages. However we think that the core reason was that bloated IDEs used to be not fun to work with. A myriad of features along with bad performance - was just a killer. Fortunately modern ones like IntelliJ and Visual Studio (at least the recent versions) are definitely built with performance in mind and are superb to work with.&lt;/p&gt;

&lt;p&gt;A surprise for us was the strong position of Notepad++. Internally we had given up on it a while ago in favour of Visual Studio Code or Sublime, but clearly it’s worth revisiting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-used-IDE.webp&quot; alt=&quot;Most used IDEs - the winner is Visual Studio Code&quot; title=&quot;Most used IDEs - the winner is Visual Studio Code&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fundamental-coding-toolset&quot;&gt;Fundamental coding toolset&lt;/h2&gt;

&lt;p&gt;Git &amp;amp; Docker (containers), a must haves for any modern developer. Those tools make life (or work should we say?) so much easier that it’s unprecedented. If you wish to learn a recently new and interesting Docker feature might be worth a look at a really great article on &lt;a href=&quot;https://blog.iterative.engineering/2021/09/28/creating-optimised-docker-images-using-multi-stage-builds/&quot;&gt;Creating optimised Docker Images using Multi-Stage Builds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes as the only container orchestrator on the top 10 list is no surprise. Developer driven environment alongside reliable operations, makes it a first choice for more complex deployment scenarios. Once combined with other most used tools from devops perspective - Ansible and Terraform, we get a pretty neat set up for CI/CD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/fundamental-coding-toolset.webp&quot; alt=&quot;Fundamental coding toolset starts with Git and Docker&quot; title=&quot;Fundamental coding toolset starts with Git and Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit of curiosity for us are &lt;a href=&quot;https://github.com/yarnpkg/berry&quot;&gt;Yarn&lt;/a&gt; and &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwij47-Wk9D0AhXJxIsKHcDrAQMQFnoECAsQAQ&amp;amp;url=https%3A%2F%2Fdeno.land%2F&amp;amp;usg=AOvVaw2tfvsEssp_oAi-6XYbU_uo&quot;&gt;Deno&lt;/a&gt;. The result of the first we take as a signal to consider it as a replacement of npm package manager, especially that it recently increased on development. The second proves that Rust and V8 JavaScript are reality and we really need to get up to speed with those technologies as we expect it to grow rapidly.&lt;/p&gt;

&lt;h2 id=&quot;top-cloud-platforms&quot;&gt;Top cloud platforms&lt;/h2&gt;

&lt;p&gt;AWS maintains its lead as the most widely used cloud platform, but Google Cloud and Microsoft Azure made substantial gains and are catching up. They simply became reliable and performant, especially Microsoft Azure, which a few years ago was just a pain to work with (from dev perspective).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/top-cloud-platforms.webp&quot; alt=&quot;Top cloud platforms - AWS maintains its lead but Google Cloud and Microsoft Azure are catching up&quot; title=&quot;Top cloud platforms - AWS maintains its lead but Google Cloud and Microsoft Azure are catching up&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-desired-by-the-tech-talents&quot;&gt;What is desired by the tech talents?&lt;/h1&gt;

&lt;p&gt;Now the other side of the coin - the outlook on which technologies are the most inspiring for and the most wanted across developers. While at Iterative we do not blindly follow hypes, we really keep an eye on the trends. Simply because all of the great technologies of tomorrow are newcomers of today.&lt;/p&gt;

&lt;h2 id=&quot;most-wished-programming-languages&quot;&gt;Most wished programming languages&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/coding-in-python-bridy-not-enjoys-it.webp&quot; alt=&quot;Coding in Python - bridy seems to not enjoy it that much!&quot; title=&quot;Coding in Python - bridy seems to not enjoy it that much!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One may not like it (as the birdy above!), yet still Python is the most desired programming language to work with across the Community. The lead however isn’t ultimate and there is strong competition right behind. TypeScript &amp;amp; JavaScript, but also Go and Rust - modern compile concurrency focused languages, which seems like another trend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-wished-programming-languages.webp&quot; alt=&quot;Most wished programming languages - One may not like it (as the birdy above!), yet still Python is the most desired programming language&quot; title=&quot;Most wished programming languages - One may not like it (as the birdy above!), yet still Python is the most desired programming language&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From our tech of choice perspective seeing two JVM related Java &amp;amp; Kotlin in Top 10 feels pretty great. While not the most hyped out there, still many so many wish to learn it, just because of the fact that it’s reliable and enjoyable to work with.&lt;/p&gt;

&lt;h2 id=&quot;loved-data-storage-technologies&quot;&gt;Loved data storage technologies&lt;/h2&gt;

&lt;p&gt;Quite shocked by the fact of such a close competition for 1st place. PostgreSql and MongoDB, two completely different philosophies, yet both got a sizable amount of interest from the Community. Redis in 3rd and Elasticsearch in 4th place - no surprise at all - simply well proven and excellent at what they are aimed for. MySql closing Top 5 just seals that open source SQL and document stores are having a good time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/loved-data-storage-technologies.webp&quot; alt=&quot;Loved data storage technologies - PostgreSql and MongoDB are the winners&quot; title=&quot;Loved data storage technologies - PostgreSql and MongoDB are the winners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit disappointing to not see any interest in graph databases like Neo4j, however it may be that they still need to prove their merits. Finally at Iterative we use 4 out of Top 5 daily, but now are also tempted to give Mongo a try, as the desire must be there for the reason.&lt;/p&gt;

&lt;h2 id=&quot;most-wanted-web-frameworks&quot;&gt;Most wanted web frameworks&lt;/h2&gt;

&lt;p&gt;React.js not only has dominated the market (as this year it has overtaken jQuery in usage), but it is also the most wanted web framework by the devs. Winning in both rankings, in probably the most competitive and variable category, confirms that going with it you can’t be wrong.&lt;/p&gt;

&lt;p&gt;Vue.js and Angular are still valued and on the radar of the community, but a newcomer Svelte had taken a fair chunk of interest too. Definitely a one to try out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/most-wanted-web-frameworks.webp&quot; alt=&quot;Most wanted web frameworks - React.js has dominated the market as most wanted and as moste used web framework&quot; title=&quot;Most wanted web frameworks - React.js has dominated the market as most wanted and as moste used web framework&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;learning-curve-and-knowledge-sources&quot;&gt;Learning curve and knowledge sources&lt;/h1&gt;

&lt;p&gt;The learning process or at least first encounters with coding happens pretty early, sometimes as early as 5-10y old, mostly before 18y old and in 90% before 24y! It may mean that learning to code in your 30’s may be nearly impossible. However we need to remember that for at least several years everyone has basic contact with programming in early school days, therefore the meaning might be a bit blurred here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-when-we-start-to-code.webp&quot; alt=&quot;When we start to code - in 90% of cases before 24y&quot; title=&quot;When we start to code - in 90% of cases before 24y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a pity that this question isn’t followed with more detailed ones about the learning curve. Writing first lines of code and the actual start of learning to code might not be the same for many.&lt;/p&gt;

&lt;p&gt;80% of professionals have higher education and while (good) companies do not care for the education grades but rather for the actual knowledge. Still it’s the most natural path to become a developer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-developers-education.webp&quot; alt=&quot;Developers education - 80% of professionals have higher education&quot; title=&quot;Developers education - 80% of professionals have higher education&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contrary to education, developers do not learn how to code in a college but rather from online resources, books and in school. Younger ones tend to learn from online resources, while older ones have learned from traditional mediums like school or books. The speed at which technology changes might be the reason, as it’s not feasible to maintain college or school courses up to date with all updates and trends. However the principals and concepts for building the software remain mostly intact and this might be a real value proposition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-where-do-devs-learn-from.webp&quot; alt=&quot;Where do devs learn from - Contrary to education, developers learn from online resources&quot; title=&quot;Where do devs learn from - Contrary to education, developers learn from online resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once work related questions or challenges are in need to solve then Google and StackOverflow are the first line of support. Countless situations for us in which those significantly helped to solve the problems. IT actually maybe one of the most important skills to learn as a developer - effective searching for information. One may think it’s easy, but it takes time to master to search efficiently.&lt;/p&gt;

&lt;p&gt;If stuck, another approach is context switching or having a pause. Very often helpful, as problems then are analyzed subconsciously often leading to solutions immediately once back to work. However, sometimes it’s a burden, as not easy to switch off from working, that’s the reality and needs to be accepted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/learning-curve-and-knowledge-sources-what-do-devs-when-stuck.webp&quot; alt=&quot;What do devs when stuck - Google and StackOverflow are the first line of support&quot; title=&quot;What do devs when stuck - Google and StackOverflow are the first line of support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At Iterative in addition to all mentioned in TOP 5 we also like to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck debugging&lt;/a&gt; technique. It simply is about describing the problem to someone else, so he can understand the context. Turns out that such exercise helps to structure the problem to yourself and very often points to an error or blocker immediately once prepared.&lt;/p&gt;

&lt;h1 id=&quot;where-is-the-money&quot;&gt;Where is the money?&lt;/h1&gt;

&lt;p&gt;When it comes to coding, it looks like the biggest money is in less popular, functional paradigm related programming languages. Clojure with an average equal to $95k per year takes a 1st place with a big lead against following F# at $81k - pretty impressive! Python with $59k on 19th, JavaScript with $54k on 29th and Java with $52k on 34th places. Not bad, but the gap between leaders is quite significant. Not sure if the results are fully representative due a smaller sample for functional technologies, but not being common may actually be the reason for the price.&lt;/p&gt;

&lt;p&gt;In the devops world what is popular and what is desired is also paid pretty well. 1st place was taken by Pulumi with an average of $110k, followed by Terraform and Chef with $90k averages, next are Ansible, Puppet and Chef with around $75k average.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/where-is-the-money-top-paid-technologies.webp&quot; alt=&quot;Top paid technologies are related to functional programming (Clojure, F#)&quot; title=&quot;Top paid technologies are related to functional programming (Clojure, F#)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at salaries from a role angle confirms that except executives and managers ranging at average of $95k, devops specialists are the ones to earn the most with an average of $70k. Then next to them are data engineers at $68k. The gap to software developers is quite big as full stack or backend specialists average at around $55k, while frontend at $50k. The least paid are students at roughly $20k and weirdly mobile developers at only $42k.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8-takeaways-from-stackoverflow-2021-developer-survey/where-is-the-money-best-salaries.webp&quot; alt=&quot;Best salaries - except for the execs and management, devops and data engineering are positions with the highest salaries&quot; title=&quot;Best salaries - except for the execs and management, devops and data engineering are positions with the highest salaries&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Thank you for getting with us over here, as it wasn’t a short read! We hope our analysis will give you base ground for further thinking, discussion and planning the future.&lt;/p&gt;

&lt;p&gt;Takeaways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript is the most widely used technology, however position of Python, Java and C# is still strong.&lt;/li&gt;
  &lt;li&gt;Scripting (JavaScript, Python, TypeScript) and modern compiled languages (GO and Rust) are trending and getting more and more interest from the community.&lt;/li&gt;
  &lt;li&gt;Proficiency with Docker &amp;amp; containers is a must have for modern developers.&lt;/li&gt;
  &lt;li&gt;Visual Studio Code as an IDE, and React.js as a web framework are dominating on the market in their category, both loved and widely used.&lt;/li&gt;
  &lt;li&gt;Open source document databases (Mongo, ElasticSearch) and SQL databases (PostgreSQL, MySql) are storage technologies which developers want to use the most.&lt;/li&gt;
  &lt;li&gt;Online resources are the primary source for knowledge and information.&lt;/li&gt;
  &lt;li&gt;Most of the developers are graduates but they learn how to code elsewhere.&lt;/li&gt;
  &lt;li&gt;Top paid jobs, ranging at $100k+ per year, are related to functional programming (Clojure, F#). Except for the execs and management, devops and data engineering are positions with the highest salaries with an average of $70k per year.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusions for us at Iterative Engineering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explore and evaluate Rust and GO technologies&lt;/li&gt;
  &lt;li&gt;Dockerize, Containerize, Kubernitize… just do it, no excuses!&lt;/li&gt;
  &lt;li&gt;Embrace the fact that devs learn online - encourage and provide them means for that&lt;/li&gt;
  &lt;li&gt;Consider unifying towards React.js and Visual Studio Code as a primary choice&lt;/li&gt;
  &lt;li&gt;Prepare higher budgets when going for devops and data engineering related endeavours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, while the above seemed most insightful, there are many other aspects which the StackOverflow survey has touched and we really recommend &lt;a href=&quot;https://insights.stackoverflow.com/survey/2021&quot;&gt;taking a look at it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you wish to discuss your thoughts or have any questions give us a shout on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedIn&lt;/li&gt;
  &lt;li&gt;contact@iterative.pl&lt;/li&gt;
  &lt;li&gt;or simply book a discovery call &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Dec 2021 00:00:00 -0600</pubDate>
        <link>https://blog.iterative.engineering/2021/12/10/key-8-takeaways-from-stackoverflow-2021-developers-survey/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/12/10/key-8-takeaways-from-stackoverflow-2021-developers-survey/</guid>
        
        <category>IT Industry</category>
        
        <category>Software Development Trends</category>
        
        <category>Community Surveys and Raports</category>
        
        
        <category>business</category>
        
      </item>
    
      <item>
        <title>Creating optimised Docker Images using Multi-Stage Builds</title>
        <description>&lt;p&gt;Have you ever wondered how you can leverage building docker containers in your project to take your experience to the next level? If so then have a look at this step by step guide that hopefully will help you achieve that goal using multi-stage builds.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you would like to preview the code used in this article, just clone &lt;a href=&quot;https://github.com/IterativeEngineering/blog.docker-multistage-builds&quot;&gt;this repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-use-multi-stage-builds&quot;&gt;Why use Multi-Stage builds?&lt;/h2&gt;

&lt;p&gt;In a nutshell multi-stage builds feature is a recent improvement to the docker build system&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;final image sizes&lt;/li&gt;
  &lt;li&gt;image build orchestration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The refinement is achieved via allowing to consecutively use different images (for whatever purpose is needed) and pipe data subsequently through them within a single Dockerfile with assumption that the final image is built based on the last FROM statement.&lt;/p&gt;

&lt;h2 id=&quot;standard-approach&quot;&gt;Standard approach&lt;/h2&gt;

&lt;p&gt;If you already worked with a docker, you certainly faced the problem of large built images or had to do custom shell scripts to orchestrate build. Each instruction in the dockerfile adds another layer to the image which increases its size. Moreover, creating more complex images may require the use of additional shell scripts and multiple dockerfiles which may be cumbersome to manage.&lt;/p&gt;

&lt;p&gt;To illustrate the above issues, I’ve created a simple java web application that I am going to build and run in a docker container. By default, without using multistage builds, the dockerfile would look like this:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile.singlestage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; registry.access.redhat.com/ubi8/openjdk-11:1.3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /deployments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /deployments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;mvn package
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 8080&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;java&quot;, &quot;-jar&quot;, &quot;target/demo-webapp-0.0.1-SNAPSHOT.jar&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above file we perform following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new image based on the redhat’s &lt;em&gt;universal base image&lt;/em&gt; that already contains openjdk-11.&lt;/li&gt;
  &lt;li&gt;Create the &lt;em&gt;/deployments&lt;/em&gt; working directory and then copy the content of our project to it.&lt;/li&gt;
  &lt;li&gt;Build java archive file with maven&lt;/li&gt;
  &lt;li&gt;Run java application from command line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since we already have the Dockerfile prepared, we can start building the image with the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; demo-webapp:singlestage &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile.singlestage &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards we can check the result:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images

&lt;span class=&quot;c&quot;&gt;## _REPOSITORY 		TAG 		IMAGE ID 		CREATED 		SIZE&lt;/span&gt;
demo-webapp		singlestage	491de71ef224		24 seconds ago		549MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-an-image-using-builder-pattern--shell-script&quot;&gt;Build an image using builder pattern &amp;amp; shell script&lt;/h2&gt;

&lt;p&gt;The newly created image that runs our application is quite large, so let’s optimize it using the builder pattern. For this purpose, we need to create 2 separate dockerfiles - one responsible for building the application and the other for launching it. Thanks to this approach, the final runner container may contain only elements that are important to us.&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile.builder&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; registry.access.redhat.com/ubi8/openjdk-11:1.3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /deployments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /deployments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;mvn package
&lt;span class=&quot;c&quot;&gt;# Dockerfile.runner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; gcr.io/distroless/java:11&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./deployments/target/demo-webapp-0.0.1-SNAPSHOT.jar .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 8080&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;demo-webapp-0.0.1-SNAPSHOT.jar&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To automate the process of building images defined in separate dockerfiles, we create a shell script that carries out the steps necessary to run our application.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Building demo-webapp builder image...&quot;&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; demo-webapp:singlestage-builder &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile.builder &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Extracting builder content...&quot;&lt;/span&gt;
docker container create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; extract-builder demo-webapp:singlestage-builder
docker container &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;extract-builder:/deployments &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; extract-builder
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Building demo-webapp runner image...&quot;&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; demo-webapp:singlestage-runner &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile.runner &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After executing the &lt;em&gt;build.sh&lt;/em&gt; script, we can notice that 2 images were created and the final (runner) image is much smaller than before. It is a very big advantage, because you only need to transfer the runner image during application release in the future.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## _REPOSITORY 		TAG 			IMAGE ID 	CREATED 		SIZE&lt;/span&gt;
demo-webapp		singlestage-runner	5fd438ae9faa	9 seconds ago		217MB
demo-webapp		singlestage-builder	f6e90caab67b	10 seconds ago		532MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;multi-stage-build&quot;&gt;Multi-stage build&lt;/h2&gt;

&lt;p&gt;Along with the implementation of version 17.05, docker provided the multi-stage build functionality which allows you to divide the creation of the container into several phases and build it as several separate images that have access to each other. To take advantage of multistage builds, we need to create a new dockerfile.&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile.multistage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry.access.redhat.com/ubi8/openjdk-11:1.3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;builder&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /deployments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /deployments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;mvn package
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gcr.io/distroless/java:11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;runner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /deployments/target/demo-webapp-0.0.1-SNAPSHOT.jar .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 8080&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;demo-webapp-0.0.1-SNAPSHOT.jar&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As of now dockerfile contains two &lt;em&gt;FROM&lt;/em&gt; clauses and it will build 2 separate images consecutively - the first &lt;em&gt;builder&lt;/em&gt; and the second, &lt;em&gt;runner&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When building the &lt;em&gt;builder&lt;/em&gt; image we execute almost exactly the same commands as in the case of executing the build using the single-stage build. The difference is the application startup command, which will be invoked by the &lt;em&gt;runner image&lt;/em&gt;. So let’s try to run it.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; demo-webapp:multistage &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile.multistage &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After calling the &lt;em&gt;docker images&lt;/em&gt; command, we can see that also this time two images were created. However, we didn’t need to write additional shell scripts for this.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## _REPOSITORY 		TAG 		IMAGE ID 		CREATED 		SIZE&lt;/span&gt;
demo-webapp		multistage	44af0173ce49		8 seconds ago		217MB
&amp;lt;none&amp;gt; 		&amp;lt;none&amp;gt;			4969b156508a		8 seconds ago		549MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;As you can see, the multi-stage approach has many advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easier management of the image creation process (thanks to the possibility of including instructions for several related images in a single dockerfile)&lt;/li&gt;
  &lt;li&gt;No need to create shell scripts to automate the entire process.&lt;/li&gt;
  &lt;li&gt;Saving disk space (By using the builder container as a common base for subsequent containers)&lt;/li&gt;
  &lt;li&gt;Reducing the size of the final runtime container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! We hope you found “Creating optimised Docker Images using Multi-Stage Builds” helpful in your devops activities.&lt;/p&gt;

&lt;p&gt;If this topic interests you, visit &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;use multi-stage builds&lt;/a&gt; for more details or even better &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;talk to our team&lt;/a&gt; today.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Sep 2021 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2021/09/28/creating-optimised-docker-images-using-multi-stage-builds/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/09/28/creating-optimised-docker-images-using-multi-stage-builds/</guid>
        
        <category>Docker</category>
        
        <category>Docker Images</category>
        
        <category>Containers</category>
        
        <category>Build Pipeline</category>
        
        <category>Continuous Delivery</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>How to Avoid Overdesigning</title>
        <description>&lt;p&gt;Overdesign is a state wherein a product is overly-complex or exceeds the usual standards of its contemporaries to the point where it becomes annoying or unusable. Engineering companies are the most likely to fall into this trap as we’re the ones competing to find the next big thing.&lt;/p&gt;

&lt;p&gt;In addition to the negative impact on user experience it also heavily increases costs and time to market. As it leads to long design &amp;amp; analysis cycles, followed by even more challenging implementation due to complexity of planned solution.&lt;/p&gt;

&lt;p&gt;A prominent example of overdesign could be at the time (2013!) a potentially breakthrough &lt;a href=&quot;https://www.digitaltrends.com/cool-tech/samsung-to-introduce-eye-scroll-feature-on-galaxy-s4/&quot;&gt;eye-scroll feature&lt;/a&gt; of the Samsung Galaxy S4. The idea was to allow users a “hands-free” experience by letting their eyes control the screen, which in an essence sounds great.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But smart scrolling didn’t always work well for me, and like Air Gesture, I found it easier just to touch the screen to navigate the old-fashioned way
&lt;cite&gt;Steve Kovach, Businessinsider&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, it turned out that users quickly became tired of the feature and its interference whenever they were watching a video or reading an article.&lt;/p&gt;

&lt;p&gt;So how to avoid Overdesign? Following are a few rules that may help in doing so!&lt;/p&gt;

&lt;h2 id=&quot;what-people-actually-want&quot;&gt;What People Actually Want&lt;/h2&gt;

&lt;p&gt;Companies often get in their own way by overthinking features without sparing a thought for what users actually want. As we embrace a customer driven approach we wanted to figure this out for ourselves. So we simply asked some of our clients to leave reviews of our work on the &lt;a href=&quot;https://themanifest.com/pl/software-development/app-modernization/companies#iterativeengineering&quot;&gt;B2B service provider&lt;/a&gt; platforms, Clutch and The Manifest.&lt;/p&gt;

&lt;p&gt;The answers were quite telling and most of them boil down to three essential elements. They want their projects done quickly, the products easy to use and the collaboration process to be tight &amp;amp; transparent.&lt;/p&gt;

&lt;h2 id=&quot;get-it-done&quot;&gt;Get It Done&lt;/h2&gt;

&lt;p&gt;Projects operate under tight deadlines in order to minimize expenditures on a single factor. Finishing a job ahead of schedule is a big boost to everyone involved. While this isn’t anything groundbreaking, it seems most companies underestimate how much clients value this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-avoid-overdesign/win.webp&quot; alt=&quot;Wakacje.IN, a travel holidays e-commerce app - client review for 5 stars&quot; title=&quot;Wakacje.IN, a travel holidays e-commerce app - client review for 5 stars&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our client in this review made a point of mentioning the rapid development that our development process allowed. This pushed their timetable up, which positively impacted their sales and leads for the rest of the period.&lt;/p&gt;

&lt;h2 id=&quot;keep-it-lean&quot;&gt;Keep it Lean&lt;/h2&gt;

&lt;p&gt;Iterative approach as one of the foundations of Lean principles is an invaluable solution for avoiding overdesign. The philosophy of many little steps provide a chance for a rapid verification and constant adjustments of taken direction. Leading to better results with less work, while also avoiding overthinking. It is also more appreciated by the customers as they see changes quickly and can really affect the shape of the product.&lt;/p&gt;

&lt;h2 id=&quot;easy-to-use&quot;&gt;Easy to Use&lt;/h2&gt;

&lt;p&gt;Features are supposed to make things easier. If the feature makes the overall process too complex, this is an utter failure of design. This is where expertise in UX and UI come in handy, as duly proven by this review.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-avoid-overdesign/healthly.webp&quot; alt=&quot;Healthly, award wining telemedicine platform - another 5 start client review&quot; title=&quot;Healthly, award wining telemedicine platform - another 5 start client review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The client was quite happy with the advanced functionalities that the app provided while being easy to use for their customers.&lt;/p&gt;

&lt;p&gt;Another great example of how important is to facilaite ease of use via UI&amp;amp;UX is the case of &lt;a href=&quot;https://www.linkedin.com/posts/krzysztof-gasior_productmanagement-uxui-monetization-activity-6702359106499420160-yAeq/&quot;&gt;how Headspace had simplified their purchase flow&lt;/a&gt; which resulted with an increase of conversion rate by nearly 50%.&lt;/p&gt;

&lt;h2 id=&quot;do-not-reinvent-the-wheel&quot;&gt;Do not reinvent the wheel&lt;/h2&gt;

&lt;p&gt;Follow the design patterns and best practices - this will help you to maintain your work and avoid problems that others have already solved. Keep in mind that processes, tools and conventions lay at the core of a successful software development efforts.&lt;/p&gt;

&lt;p&gt;Do market research &amp;amp; competition analysis - it’s not a shame to check and learn from others about how they have approached and solved similar challenges. In fact that is the true nature of progress - avoid previously made mistakes while enriching the experience with new features.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Overdesign is a big threat, but one that you can definitely avoid, by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;focusing on features that matters&lt;/li&gt;
  &lt;li&gt;delivering iteratively &amp;amp; quickly&lt;/li&gt;
  &lt;li&gt;keeping things simple and intuitive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more, feel most welcome to &lt;a href=&quot;https://calendly.com/krzysztof-gasior&quot;&gt;talk to our team&lt;/a&gt; today.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jul 2021 00:00:00 -0500</pubDate>
        <link>https://blog.iterative.engineering/2021/07/09/how-to-avoid-overdesigning/</link>
        <guid isPermaLink="true">https://blog.iterative.engineering/2021/07/09/how-to-avoid-overdesigning/</guid>
        
        <category>Lean Principles</category>
        
        <category>Iterative Approach</category>
        
        <category>Good Practices</category>
        
        <category>Overdesign</category>
        
        
        <category>business</category>
        
      </item>
    
  </channel>
</rss>
